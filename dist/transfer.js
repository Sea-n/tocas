// Generated by CoffeeScript 2.0.0-beta4
(function() {
  // ------------------------------------------------------------------------
  // 變數與常數設置
  // ------------------------------------------------------------------------

  // 模組名稱。
  var ClassName, EVENT_NAMESPACE, Error, Event, MODULE_NAMESPACE, NAME, Selector, Settings;

  NAME = 'transfer';

  // 模組事件鍵名。
  EVENT_NAMESPACE = `.${NAME}`;

  // 模組命名空間。
  MODULE_NAMESPACE = `module-${NAME}`;

  // 模組設定。
  Settings = {
    // 消音所有提示，甚至是錯誤訊息。
    silent: false,
    // 顯示除錯訊息。
    debug: true,
    // 監聽 DOM 結構異動並自動重整快取。
    observeChanges: true,
    
    onAdd: () => {},
    
    onRemove: () => {},
    
    onChange: () => {},
    
    onSearch: () => {}
  };

  // 事件名稱。
  Event = {
    OPENING: `opening${EVENT_NAMESPACE}`,
    OPEN: `open${EVENT_NAMESPACE}`,
    CLOSING: `closing${EVENT_NAMESPACE}`,
    CLOSE: `close${EVENT_NAMESPACE}`,
    CHANGE: `change${EVENT_NAMESPACE}`,
    CLICK: `click${EVENT_NAMESPACE}`
  };

  // 樣式名稱。
  ClassName = {
    ACTIVE: 'active',
    ANIMATING: 'animating'
  };

  // 選擇器名稱。
  Selector = {
    TITLE: '.title',
    CONTENT: '.content',
    ACCORDION: '.ts.accordion',
    ACTIVE_CONTENT: '.active.content',
    ACTIVE: '.active'
  };

  // 錯誤訊息。
  Error = {};

  // ------------------------------------------------------------------------
  // 模組註冊
  // ------------------------------------------------------------------------
  ts.register({NAME, MODULE_NAMESPACE, Error, Settings}, ({$allModules, $this, element, debug, settings}) => {
    var destination, module, source;
    // ------------------------------------------------------------------------
    // 區域變數
    // ------------------------------------------------------------------------
    source = [];
    destination = [];
    // ------------------------------------------------------------------------
    // 模組定義
    // ------------------------------------------------------------------------
    return module = {
      get: {
        destination: {
          value: () => {}
        },
        source: {
          value: () => {}
        }
      },
      exchange: {
        selected: {
          item: () => {
            var dest;
            $this.find('.source .items .selected.item').appendTo($this.find('.destination .items'));
            dest = $this.find('.destination .items').get();
            dest.scrollTop = dest.scrollHeight;
            return module.unselect.all();
          }
        }
      },
      reset: {
        destination: {
          value: () => {}
        },
        source: {
          value: () => {}
        }
      },
      add: {
        destination: {
          value: () => {}
        },
        source: {
          value: () => {}
        }
      },
      set: {
        destination: {
          value: () => {}
        },
        source: {
          value: () => {}
        }
      },
      move: {
        destination: {
          item: (index) => {}
        },
        source: {
          item: (index) => {}
        }
      },
      select: {
        value: (value) => {
          return $this.find(`.items .item[data-value='${value}']`).addClass('selected');
        }
      },
      unselect: {
        value: (value) => {
          return $this.find(`.items .item[data-value='${value}']`).removeClass('selected');
        },
        all: () => {
          return $this.find(".items .selected.item").removeClass('selected');
        }
      },
      is: {
        select: (value) => {
          return $this.find(`.items .selected.item[data-value='${value}']`).length !== 0;
        }
      },
      bind: {
        events: () => {
          $this.on(Event.CLICK, '.items .item', function() {
            var value;
            value = ts(this).attr('data-value');
            if (module.is.select(value)) {
              return module.unselect.value(value);
            } else {
              return module.select.value(value);
            }
          });
          return $this.on(Event.CLICK, '.ts.button', () => {
            return module.exchange.selected.item();
          });
        }
      },
      // ------------------------------------------------------------------------
      // 基礎方法
      // ------------------------------------------------------------------------
      initialize: () => {
        debug('初始化穿梭框', element);
        return module.bind.events();
      },
      instantiate: () => {
        return debug('實例化穿梭框', element);
      },
      refresh: () => {
        return $allModules;
      },
      destroy: () => {
        debug('摧毀穿梭框', element);
        $this.removeData(MODULE_NAMESPACE).off(EVENT_NAMESPACE);
        return $allModules;
      }
    };
  });

}).call(this);
