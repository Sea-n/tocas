// Generated by CoffeeScript 2.0.0-beta4
// Accordion

// 手風琴
ts.fn.accordion = {
  value: function() {
    var ClassName, Data, Event, EventKey, Name, Selector, SettingKey, Settings;
    // 模組名稱。
    Name = 'accordion';
    // 模組事件鍵名。
    EventKey = `.${Name}`;
    // 設定鍵名。
    SettingKey = `${Name}`;
    // 模組設定。
    Settings = {
      // 是否僅允許單個手風琴只有一個分頁能被打開。
      exclusive: true,
      // 消音所有提示，甚至是錯誤訊息。
      silent: false,
      // 顯示除錯訊息。
      debug: true,
      // 展開的手風琴是否可以被關閉。
      collapsible: false,
      // 當手風琴被關閉時，是否一同閉合子手風琴。
      closeNested: true,
      // 當手風琴正在展開時所會呼叫的函式。
      onOpening: function() {},
      // 當手風琴展開時所會呼叫的函式。
      onOpen: function() {},
      // 當手風琴正在關閉時所會呼叫的函式。
      onClosing: function() {},
      // 當手風琴關閉時所會呼叫的函式。
      onClose: function() {},
      // 當手風琴被切換開關時所會呼叫的函式。
      onChange: function() {}
    };
    // 事件名稱。
    Event = {
      OPENING: `opening${EventKey}`,
      OPEN: `open${EventKey}`,
      CLOSING: `closing${EventKey}`,
      CLOSE: `close${EventKey}`,
      CHANGE: `change${EventKey}`,
      CLICK: `click${EventKey}`
    };
    // 樣式名稱。
    ClassName = {
      ACTIVE: 'active',
      ANIMATING: 'animating'
    };
    // 選擇器名稱。
    Selector = {
      TITLE: '.title',
      CONTENT: '.content',
      ACCORDION: '.ts.accordion',
      ACTIVE_CONTENT: '.active.content',
      ACTIVE: '.active'
    };
    // 資料。
    Data = {
      $MODULES: ts(this),
      ARGUMENTS: arguments,
      QUERY: arguments[0],
      QUERY_ARGUMENTS: [].slice.call(arguments, 1),
      VALUE: void 0
    };
    // 每個模組
    Data.$MODULES.each(function() {
      var $content, $this, $title, module, settings;
      // 本元素。
      $this = ts(this);
      
      $title = $this.find(Selector.TITLE);
      $content = $this.find(Selector.CONTENT);
      
      settings = {};
      // 模組主體。
      module = {
        // Initialize

        // 初始化
        initialize: () => {
          settings = Settings;
          $this.data(SettingKey, Settings);
          module.debug('初始化手風琴', $this);
          $this.on(Event.CLICK, Selector.TITLE, function() {
            return module.toggle($title.indexOf(this));
          });
          $this.on(Event.OPENING, function(event, context) {
            return settings.onOpening.call(context, event);
          });
          $this.on(Event.OPEN, function(event, context) {
            return settings.onOpen.call(context, event);
          });
          $this.on(Event.CLOSING, function(event, context) {
            return settings.onClosing.call(context, event);
          });
          $this.on(Event.CLOSE, function(event, context) {
            return settings.onClose.call(context, event);
          });
          return $this.on(Event.CHANGE, function(event, context) {
            return settings.onChange.call(context, event);
          });
        },
        // Destroy

        // 摧毀
        destroy: function() {
          module.debug('摧毀手風琴', $this);
          return $this.removeData(SettingKey).off(EventKey);
        },
        // Open

        // 展開
        open: function(index) {
          var $c, $t;
          module.debug('開啟手風琴分頁', index, $this);
          $t = $title.eq(index);
          $c = $content.eq(index);
          if ($t.hasClass(ClassName.ACTIVE)) {
            return;
          }
          if (settings.exclusive) {
            module.debug('由於手風琴分頁同時間僅能有一個打開，因此關閉其他分頁', index, $this);
            module.closeAll();
          }
          $this.trigger(Event.OPENING, $c.get());
          $this.trigger(Event.OPEN, $c.get());
          $this.trigger(Event.CHANGE, $c.get());
          $t.addClass(ClassName.ACTIVE);
          return $c.addClass(ClassName.ACTIVE);
        },
        // Close

        // 閉合
        close: function(index) {
          var $c, $t;
          module.debug('關閉手風琴分頁', index, $this);
          $t = $title.eq(index);
          $c = $content.eq(index);
          if (!$t.hasClass(ClassName.ACTIVE)) {
            return;
          }
          $this.trigger(Event.CLOSING, $c.get());
          $this.trigger(Event.CLOSE, $c.get());
          $this.trigger(Event.CHANGE, $c.get());
          $t.removeClass(ClassName.ACTIVE);
          $c.removeClass(ClassName.ACTIVE);
          // 如果需要的話，一同關閉子手風琴。
          if (settings.closeNested) {
            module.debug('關閉子手風琴因應設定', index, $this);
            return ts($this.find(Selector.ACCORDION)).accordion("close all");
          }
        },
        // Close Others

        // 閉合指定以外
        closeOthers: function(index) {
          module.debug('關閉指定手風琴分頁以外的其他分頁', index, $this);
          module.closeAll();
          return module.open(index);
        },
        // Close All

        // 閉合所有
        closeAll: function() {
          var i, j, ref, results;
          module.debug('關閉所有手風琴分頁', $this);
          results = [];
          for (i = j = 0, ref = $this.find(Selector.TITLE).length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            results.push(module.close(i));
          }
          return results;
        },
        // Toggle

        // 切換開合
        toggle: function(index) {
          var $t;
          module.debug('切換手風琴分頁', index, $this);
          $t = $title.eq(index);
          if ($t.hasClass(ClassName.ACTIVE)) {
            if (!settings.collapsible) {
              module.debug('手風琴不允許閉合唯一分頁，略過切換步驟', index, $this);
              return;
            }
            return module.close(index);
          } else {
            return module.open(index);
          }
        },
        // Debug

        // 除錯訊息
        debug: function() {
          if (!settings.debug || settings.silent) {
            return;
          }
          module.debug = Function.prototype.bind.call(console.info, console, `${Name}:`);
          return module.debug.apply(console, arguments);
        },
        // Error

        // 錯誤訊息
        error: function() {
          if (settings.silent) {
            return;
          }
          module.error = Function.prototype.bind.call(console.error, console, `${Name}:`);
          return module.error.apply(console, arguments);
        },
        // Invoke

        // 模組呼叫點
        invoke: () => {
          switch (Data.QUERY) {
            // Open

            // 開啟指定索引的手風琴內容。
            case 'open':
              return module.open(Data.QUERY_ARGUMENTS[0]);
            // Close

            // 關閉指定索引的手風琴內容。
            case 'close':
              return module.close(Data.QUERY_ARGUMENTS[0]);
            // Close Others

            // 關閉指定索引手風琴以外的其他索引。
            case 'close others':
              return module.closeOthers(Data.QUERY_ARGUMENTS[0]);
            // Close All

            // 關閉所有手風琴的頁籤。
            case 'close all':
              return module.closeAll();
            // Toggle

            // 切換指定索引的手風琴內容，如果是開啟的則關閉，相反之。
            case 'toggle':
              return module.toggle(Data.QUERY_ARGUMENTS[0]);
          }
        }
      };
      settings = $this.data(SettingKey);
      module.initialize();
      return module.invoke();
    });
    if (Data.VALUE !== void 0) {
      return Data.VALUE;
    } else {
      return this;
    }
  }
};
