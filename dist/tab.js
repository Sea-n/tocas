// Generated by CoffeeScript 2.0.0-beta4
(function() {
  // ------------------------------------------------------------------------
  // 變數與常數設置
  // ------------------------------------------------------------------------

  // 模組名稱。
  var Attribute, ClassName, EVENT_NAMESPACE, Error, Event, MODULE_NAMESPACE, Metadata, NAME, Selector, Settings;

  NAME = 'tab';

  // 模組事件鍵名。
  EVENT_NAMESPACE = `.${NAME}`;

  // 模組命名空間。
  MODULE_NAMESPACE = `module-${NAME}`;

  // 模組設定。
  Settings = {
    // 消音所有提示，甚至是錯誤訊息。
    silent: false,
    // 顯示除錯訊息。
    debug: true,
    // 監聽 DOM 結構異動並自動重整快取。
    observeChanges: true,
    // 當分頁第一次開啟時所會呼叫的回呼函式。
    onFirstLoad: (tabName) => {},
    // 當分頁被開啟時所會呼叫的回呼函式。
    onLoad: (tabName) => {},
    // 是否要紀錄分頁籤的開關歷程至瀏覽器的上下頁歷程中。
    history: true,
    // 欲採用何種分頁籤手法？可用：`hash` 或 `state`。
    historyType: 'hash'
  };

  // 中繼資料名稱。
  Metadata = {
    LOADED: 'loaded'
  };

  // 事件名稱。
  Event = {
    FIRSTLOAD: `firstload${EVENT_NAMESPACE}`,
    LOAD: `load${EVENT_NAMESPACE}`,
    CLICK: `click${EVENT_NAMESPACE}`,
    HASHCHANGE: `hashchange${EVENT_NAMESPACE}`,
    POPSTATE: `popstate${EVENT_NAMESPACE}`
  };

  // 標籤名稱。
  Attribute = {
    GROUP: 'data-tab-group',
    TAB: 'data-tab'
  };

  // 樣式名稱。
  ClassName = {
    ACTIVE: 'active',
    TAB: 'tab'
  };

  // 選擇器名稱。
  Selector = {
    TAB: (name) => {
      return `.tab[${Attribute.TAB}='${name}']`;
    },
    ANY_TAB: '.tab[data-tab]',
    ACTIVE_TAB: '.active.tab[data-tab]',
    MENU: '.menu',
    MENU_ITEM: (name) => {
      return `.menu .item[${Attribute.TAB}='${name}']`;
    },
    ITEM: '.item'
  };

  // 錯誤訊息。
  Error = {};

  // ------------------------------------------------------------------------
  // 模組註冊
  // ------------------------------------------------------------------------
  ts.register({NAME, MODULE_NAMESPACE, Error, Settings}, ({$allModules, $this, element, debug, settings, index}) => {
    var module;
    // ------------------------------------------------------------------------
    // 區域變數
    // ------------------------------------------------------------------------

    // ------------------------------------------------------------------------
    // 模組定義
    // ------------------------------------------------------------------------
    return module = {
      change: {
        tab: (name, recursive = true) => {
          var openAndCloseOthers;
          name = module.decode(name);
          openAndCloseOthers = (value) => {
            var $item, $tab;
            ts(Selector.MENU_ITEM(value)).addClass(ClassName.ACTIVE).closest(Selector.MENU).find(Selector.ITEM).not(Selector.MENU_ITEM(value)).each(function() {
              return ts(Selector.TAB(ts(this).attr(Attribute.TAB))).removeClass(ClassName.ACTIVE);
            }).removeClass(ClassName.ACTIVE);
            $tab = ts(Selector.TAB(value));
            $tab.addClass(ClassName.ACTIVE);
            $item = ts(Selector.MENU_ITEM(value));
            if (!$item.tab('is loaded')) {
              $item.trigger(Event.FIRSTLOAD, $tab.get(), value);
              $item.tab('set loaded', true);
            }
            return $item.trigger(Event.LOAD, $tab.get(), value);
          };
          if (recursive) {
            ts(Selector.TAB(name)).tab('get paths').forEach(openAndCloseOthers);
          } else {
            openAndCloseOthers(name);
          }
          module.update.hash();
          return $allModules;
        }
      },
      decode: (uri) => {
        return decodeURIComponent(uri);
      },
      get: {
        name: () => {
          return $this.attr(Attribute.TAB);
        },
        paths: () => {
          var getParent, paths;
          paths = [];
          getParent = ($element) => {
            var $parentTab;
            paths.push($element.attr(Attribute.TAB));
            $parentTab = $element.parent().closest(Selector.ANY_TAB);
            if ($parentTab.length !== 0) {
              getParent($parentTab);
            }
            return paths;
          };
          return getParent($this);
        },
        tab: () => {
          return ts(Selector.TAB(module.get.name())).get();
        },
        $tab: () => {
          return ts(Selector.TAB(module.get.name()));
        },
        path: () => {
          return module.get.paths().join(',');
        },
        hash: () => {
          var hash;
          hash = window.location.hash;
          if (hash) {
            return module.decode(hash.slice(1));
          } else {
            return '';
          }
        }
      },
      has: {
        hash: () => {
          return !!window.location.hash;
        }
      },
      set: {
        loaded: (bool) => {
          return $this.data(Metadata.LOADED, bool);
        }
      },
      is: {
        active: () => {
          return $this.hasClass(ClassName.ACTIVE);
        },
        tab: () => {
          return $this.hasClass(ClassName.TAB);
        },
        loaded: () => {
          return $this.data(Metadata.LOADED) === true;
        }
      },
      apply: {
        hash: () => {
          return setTimeout(function() {
            var hash;
            if (!module.has.hash()) {
              return;
            }
            hash = module.get.hash();
            if (module.same.hash(hash)) {
              return;
            }
            return hash.split(',').forEach((value) => {
              return module.change.tab(value);
            });
          }, 0);
        }
      },
      update: {
        hash: () => {
          var hash;
          hash = [];
          ts(Selector.ACTIVE_TAB).each(function() {
            var $parentTab, $tab;
            $tab = ts(this);
            $parentTab = $tab.parent().closest(Selector.ANY_TAB);
            if ($parentTab.length !== 0 && !$parentTab.hasClass(ClassName.ACTIVE)) {
              return;
            }
            if ($tab.find(Selector.ACTIVE_TAB).length !== 0) {
              return;
            }
            return hash.push($tab.tab('get name'));
          });
          hash = `#${hash.join(',')}`;
          if (settings.history) {
            return history.pushState(null, null, hash);
          } else {
            return history.replaceState(null, null, hash);
          }
        }
      },
      same: {
        hash: (hash) => {
          var same;
          same = true;
          hash.split(',').forEach((value) => {
            if (!ts(Selector.TAB(value)).hasClass(ClassName.ACTIVE)) {
              return same = false;
            }
          });
          return same;
        }
      },
      bind: {
        events: () => {
          $this.on(Event.CLICK, () => {
            if (module.is.active()) {
              return;
            }
            return module.change.tab(module.get.name(), false);
          });
          $this.on(Event.FIRSTLOAD, (event, context, name) => {
            debug('發生 FIRSTLOAD 事件', context, name);
            return settings.onFirstLoad.call(context, event, name);
          });
          $this.on(Event.LOAD, (event, context, name) => {
            debug('發生 LOAD 事件', context, name);
            return settings.onLoad.call(context, event, name);
          });
          if (settings.history) {
            ts(window).on(Event.POPSTATE, () => {
              return module.apply.hash();
            });
          }
          return $this.attr('href', 'javascript:void(0)');
        }
      },
      // ------------------------------------------------------------------------
      // 基礎方法
      // ------------------------------------------------------------------------
      initialize: () => {
        debug('初始化分頁籤', element);
        if (module.is.tab()) {
          return;
        }
        module.bind.events();
        return module.apply.hash();
      },
      instantiate: () => {
        return debug('實例化分頁籤', element);
      },
      refresh: () => {
        return $allModules;
      },
      destroy: () => {
        debug('摧毀分頁籤', element);
        $this.removeData(MODULE_NAMESPACE).off(EVENT_NAMESPACE);
        return $allModules;
      }
    };
  });

}).call(this);
