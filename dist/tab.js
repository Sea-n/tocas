// Generated by CoffeeScript 2.0.0-beta4
(function() {
  // ------------------------------------------------------------------------
  // 變數與常數設置
  // ------------------------------------------------------------------------

  // 模組名稱。
  var Attribute, ClassName, EVENT_NAMESPACE, Error, Event, MODULE_NAMESPACE, NAME, Selector, Settings;

  NAME = 'tab';

  // 模組事件鍵名。
  EVENT_NAMESPACE = `.${NAME}`;

  // 模組命名空間。
  MODULE_NAMESPACE = `module-${NAME}`;

  // 模組設定。
  Settings = {
    // 消音所有提示，甚至是錯誤訊息。
    silent: false,
    // 顯示除錯訊息。
    debug: true,
    // 監聽 DOM 結構異動並自動重整快取。
    observeChanges: true,
    // 當分頁第一次開啟時所會呼叫的回呼函式。
    onFirstLoad: (tabName, groupName) => {},
    // 當分頁被開啟時所會呼叫的回呼函式。
    onLoad: (tabName, groupName) => {},
    // 當分頁被切換時所會呼叫的回呼函式
    onSwitch: (tabName, groupName) => {},
    // HTML5 的 state 基礎路徑。
    path: false,
    // 是否紀錄 HTML5 的 state 分頁籤異動至瀏覽器瀏覽紀錄供上下頁返回與切換。
    history: false,
    // 欲採用何種分頁籤手法？可用：`hash` 或 `state`。
    historyType: 'hash'
  };

  // 事件名稱。
  Event = {
    FIRSTLOAD: `firstload${EVENT_NAMESPACE}`,
    LOAD: `load${EVENT_NAMESPACE}`,
    SWITCH: `switch${EVENT_NAMESPACE}`,
    CLICK: `click${EVENT_NAMESPACE}`,
    HASHCHANGE: `hashchange${EVENT_NAMESPACE}`
  };

  // 標籤名稱。
  Attribute = {
    GROUP: 'data-tab-group',
    TAB: 'data-tab'
  };

  // 樣式名稱。
  ClassName = {
    ACTIVE: 'active'
  };

  // 選擇器名稱。
  Selector = {
    GROUP_TABS: (group) => {
      return `.tab[${Attribute.GROUP}='${group}']`;
    },
    GROUP_TAB: (name, group) => {
      return `.tab[${Attribute.TAB}='${name}'][${Attribute.GROUP}='${group}']`;
    },
    TAB: (name) => {
      return `.tab[${Attribute.TAB}='${name}']`;
    },
    ANY_TAB: '.tab',
    MENU_GROUP_ITEMS: (group) => {
      return `.menu .item[${Attribute.GROUP}='${group}']`;
    },
    MENU_GROUP_ITEM: (name, group) => {
      return `.menu .item[${Attribute.TAB}='${name}'][${Attribute.GROUP}='${group}']`;
    },
    MENU_ITEM: (name) => {
      return `.menu .item[${Attribute.TAB}='${name}']`;
    },
    ITEM: '.item'
  };

  // 錯誤訊息。
  Error = {};

  // ------------------------------------------------------------------------
  // 模組註冊
  // ------------------------------------------------------------------------
  ts.register({NAME, MODULE_NAMESPACE, Error, Settings}, ({$allModules, $this, element, debug, settings}) => {
    var module;
    // ------------------------------------------------------------------------
    // 區域變數
    // ------------------------------------------------------------------------

    // ------------------------------------------------------------------------
    // 模組定義
    // ------------------------------------------------------------------------
    return module = {
      hideOthers: (name, group) => {
        if (group === void 0) {
          return module.get.menuItems.except(name).each(function() {
            ts(this).removeClass(ClassName.ACTIVE);
            return ts(Selector.TAB(module.get.name(this))).removeClass(ClassName.ACTIVE);
          });
        } else {
          ts(Selector.MENU_GROUP_ITEMS(group)).not(Selector.MENU_GROUP_ITEM(name, group)).removeClass(ClassName.ACTIVE);
          return ts(Selector.GROUP_TABS(group)).not(Selector.GROUP_TAB(name, group)).removeClass(ClassName.ACTIVE);
        }
      },
      show: (name, group) => {
        if (group === void 0) {
          ts(Selector.MENU_ITEM(name)).addClass(ClassName.ACTIVE);
          return ts(Selector.TAB(name)).addClass(ClassName.ACTIVE);
        } else {
          ts(Selector.MENU_GROUP_ITEM(name, group)).addClass(ClassName.ACTIVE);
          return ts(Selector.GROUP_TAB(name, group)).addClass(ClassName.ACTIVE);
        }
      },
      change: {
        tab: (name, group) => {
          module.show(name, group);
          return module.hideOthers(name, group);
        }
      },
      is: {
        tab: () => {}
      },
      store: {
        path: (name, group) => {
          module.parse.hash((hashName, hashGroup) => {
            if (hashGroup === group) {
              return false;
            } else {
              return true;
            }
          });
          return module.add.hash(name, group);
        }
      },
      has: {
        group: (element) => {
          return module.get.group(element) !== null;
        }
      },
      get: {
        name: (element) => {
          return ts(element).attr(Attribute.TAB);
        },
        group: (element) => {
          return ts(element).attr(Attribute.GROUP);
        },
        path: () => {
          var getParent, path;
          path = [];
          getParent = (element) => {
            var $parentTab, group, name;
            name = module.get.name(element);
            group = module.get.group(element);
            path.push(`${group}/${name}`);
            $parentTab = ts(element).parent().closest('[data-tab]');
            if ($parentTab.length !== 0) {
              return getParent($parentTab.get());
            }
          };
          getParent(element);
          return path.reverse().join(',');
        },
        hash: () => {
          return decodeURIComponent(window.location.hash.slice(1));
        },
        menuItems: {
          except: (name) => {
            return ts(Selector.MENU_ITEM(name)).parent().find(Selector.ITEM).not(Selector.MENU_ITEM(name));
          }
        }
      },
      set: {
        state: () => {},
        hash: (hash) => {
          return setTimeout(function() {
            return history.pushState(null, null, `#${decodeURIComponent(hash)}`);
          }, 0);
        }
      },
      add: {
        hash: (name, group) => {
          return module.set.hash(`${module.get.hash()},${group}/${name}`);
        }
      },
      parse: {
        hash: (callback) => {
          var hash;
          if (!window.location.hash) {
            return;
          }
          return hash = decodeURIComponent(window.location.hash.slice(1)).split(',').filter((value) => {
            var group, name, parsed;
            parsed = value.split('/');
            name = parsed[1];
            group = parsed[0];
            return callback(name, group);
          });
        }
      },
      //module.set.hash hash
      apply: {
        hash: () => {
          return module.parse.hash((name, group) => {
            module.change.tab(name, group);
            return true;
          });
        }
      },
      bind: {
        events: () => {
          $this.on(Event.CLICK, function() {
            var group, name;
            name = module.get.name(this);
            if (module.has.group(this)) {
              group = module.get.group(this);
              module.change.tab(name, group);
              return module.store.path(name, group);
            } else {
              return module.change.tab(name);
            }
          });
          return ts(window).on('popstate', () => {
            return module.parse.hash((name, group) => {
              module.change.tab(name, group);
              return true;
            });
          });
        }
      },
      // ------------------------------------------------------------------------
      // 基礎方法
      // ------------------------------------------------------------------------
      initialize: () => {
        debug('初始化分頁籤', element);
        module.bind.events();
        return module.apply.hash();
      },
      instantiate: () => {
        return debug('實例化分頁籤', element);
      },
      refresh: () => {
        return $allModules;
      },
      destroy: () => {
        debug('摧毀分頁籤', element);
        $this.removeData(MODULE_NAMESPACE).off(EVENT_NAMESPACE);
        return $allModules;
      }
    };
  });

}).call(this);
