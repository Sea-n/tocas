// Generated by CoffeeScript 2.0.0-beta4
// Dimmer

// 淡化幕
ts.fn.dimmer = {
  value: function(parameters) {
    var $allModules, ClassName, EVENT_NAMESPACE, Error, Event, MODULE_NAMESPACE, NAME, Selector, Settings, methodInvoked, query, queryArguments, returnedValue;
    // ------------------------------------------------------------------------
    // 變數與常數設置
    // ------------------------------------------------------------------------

    // 模組名稱。
    NAME = 'dimmer';
    // 模組事件鍵名。
    EVENT_NAMESPACE = `.${NAME}`;
    // 模組命名空間。
    MODULE_NAMESPACE = `module-${NAME}`;
    // 模組設定。
    Settings = {
      // 是否僅允許單個手風琴只有一個分頁能被打開。
      exclusive: true,
      // 消音所有提示，甚至是錯誤訊息。
      silent: false,
      // 顯示除錯訊息。
      debug: true,
      // 監聽 DOM 結構異動並自動重整快取。
      observeChanges: true,
      // 可否在點擊的時候關閉。
      closable: false,
      // 當出現時會呼叫的回呼函式。
      onShow: function() {},
      // 當隱藏時會呼叫的回呼函式。
      onHide: function() {},
      // 當出現或隱藏時會呼叫的回呼函式。
      onChange: function() {},
      // 當淡化幕自動產生時所要追加的樣式類別，例如 `inverted`。
      variation: false
    };
    // 事件名稱。
    Event = {
      SHOW: `SHOW${EVENT_NAMESPACE}`,
      HIDE: `HIDE${EVENT_NAMESPACE}`,
      CHANGE: `CHANGE${EVENT_NAMESPACE}`,
      CLICK: `click${EVENT_NAMESPACE}`
    };
    // 樣式名稱。
    ClassName = {
      ACTIVE: 'active',
      ANIMATING: 'animating',
      DIMMER: 'dimmer'
    };
    // 選擇器名稱。
    Selector = {
      DIMMER: ':scope > .ts.dimmer'
    };
    // 錯誤訊息。
    Error = {
      METHOD: '欲呼叫的方法並不存在'
    };
    // ------------------------------------------------------------------------
    // 私有變數
    // ------------------------------------------------------------------------
    $allModules = ts(this);
    query = arguments[0];
    queryArguments = [].slice.call(arguments, 1);
    methodInvoked = typeof query === 'string';
    returnedValue = void 0;
    // ------------------------------------------------------------------------
    // 元素遍歷
    // ------------------------------------------------------------------------
    $allModules.each(function() {
      var $dimmer, $this, element, instance, module, settings;
      // ------------------------------------------------------------------------
      // 區域變數
      // ------------------------------------------------------------------------
      $this = ts(this);
      element = this;
      instance = $this.data(MODULE_NAMESPACE);
      settings = ts.isPlainObject(parameters) ? ts.extend(Settings, parameters) : ts.extend(Settings);
      $dimmer = $this.hasClass(ClassName.DIMMER) ? $this : $this.find(Selector.DIMMER);
      // ------------------------------------------------------------------------
      // 模組定義
      // ------------------------------------------------------------------------
      module = {
        // Show

        // 顯示
        show: () => {
          module.debug('顯示淡化幕', element);
          if (module.is.active()) {
            return;
          }
          $this.trigger(Event.SHOW, element);
          $this.trigger(Event.CHANGE, element);
          return $dimmer.addClass(ClassName.ACTIVE);
        },
        // Hide

        // 隱藏
        hide: () => {
          module.debug('隱藏淡化幕', element);
          if (module.is.hidden()) {
            return;
          }
          $this.trigger(Event.HIDE, element);
          $this.trigger(Event.CHANGE, element);
          return $dimmer.removeClass(ClassName.ACTIVE);
        },
        // Toggle

        // 切換
        toggle: () => {
          module.debug('切換淡化幕', element);
          if (module.is.active()) {
            return module.hide();
          } else {
            return module.show();
          }
        },
        // Create

        // 建立
        create: function() {
          if (module.has.dimmer()) {
            return;
          }
          ts('<div>').addClass('ts dimmer').prependTo($this);
          module.refresh();
          return $dimmer.reflow();
        },
        // Is

        // 是否
        is: {
          dimmer: function() {
            return $this.hasClass(ClassName.DIMMER);
          },
          active: function() {
            return $dimmer.hasClass(ClassName.ACTIVE);
          },
          hidden: function() {
            return !$dimmer.hasClass(ClassName.ACTIVE);
          },
          animating: function() {
            return $dimmer.hasClass(ClassName.ANIMATING);
          }
        },
        // Get

        // 取得
        get: {
          dimmer: function() {
            return $dimmer.get();
          }
        },
        // Has

        // 是否有
        has: {
          dimmer: function() {
            return $this.find(Selector.DIMMER).length !== 0;
          }
        },
        // Bind

        // 綁定
        bind: {
          // Events

          // 事件
          events: () => {
            $this.on(Event.SHOW, function(event, context) {
              module.debug("發生 SHOW 事件", context);
              return settings.onShow.call(context, event);
            });
            $this.on(Event.HIDE, function(event, context) {
              module.debug("發生 HIDE 事件", context);
              return settings.onHide.call(context, event);
            });
            return $this.on(Event.CHANGE, function(event, context) {
              module.debug("發生 CHANGE 事件", context);
              return settings.onChange.call(context, event);
            });
          }
        },
        // ------------------------------------------------------------------------
        // 模組核心
        // ------------------------------------------------------------------------

        // Initialize

        // 初始化
        initialize: function() {
          module.debug('初始淡化幕', element);
          module.bind.events();
          if (!module.is.dimmer() && !module.has.dimmer()) {
            module.create();
          }
          if (settings.observeChanges) {
            module.observeChanges();
          }
          return module.instantiate();
        },
        // Instantiate

        // 實例化
        instantiate: function() {
          module.debug('實例化淡化幕', element);
          instance = module;
          return $this.data(MODULE_NAMESPACE, instance);
        },
        // Observe Changes

        // 結構異動觀察者
        observeChanges: function() {
          var observer;
          if (!'MutationObserver' in window) {
            module.debug('找不到樹狀結構變更觀測者，略過結構監聽動作', element);
            return;
          }
          observer = new MutationObserver(function(mutations) {
            module.debug('DOM 樹狀結構已變更，更新快取資料');
            return module.refresh();
          });
          observer.observe(element, {
            childList: true,
            subtree: true
          });
          return module.debug('已設置 DOM 樹狀結構異動觀察者', observer);
        },
        // Refresh

        // 更新資料
        refresh: function() {
          return $dimmer = $this.hasClass(ClassName.DIMMER) ? $this : $this.find(Selector.DIMMER);
        },
        // Destroy

        // 摧毀
        destroy: function() {
          module.debug('摧毀淡化幕', element);
          return $this.removeData(MODULE_NAMESPACE).off(EVENT_NAMESPACE);
        },
        // Invoke

        // 模組呼叫點
        invoke: function(query, passedArguments, context) {
          var camelCaseValue, depth, found, i, len, maxDepth, object, response, value;
          object = instance;
          maxDepth = void 0;
          found = void 0;
          response = void 0;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          // 如果語法是字串，本地區域也有被定義的話。
          if (typeof query === 'string' && object !== void 0) {
            // 將語法以空白分隔。
            query = query.split(/[\. ]/);
            // 取得此語法的深度。
            maxDepth = query.length - 1;
            // 解析語法的每個片段。
            for (depth = i = 0, len = query.length; i < len; depth = ++i) {
              value = query[depth];
              // 將語法轉換成駝峰式大小寫，用以對應本地模組的函式名稱。
              camelCaseValue = depth !== maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              // 如果此駝峰是大小寫有對應到模組中的物件，而且語法還未到底，那麼就依照此物件遞迴搜尋。
              if (ts.isPlainObject(object[camelCaseValue]) && depth !== maxDepth) {
                object = object[camelCaseValue];
              // 如果語法駝峰式大小寫有對應到模組的一個函式，則使用該函式。
              } else if (object[camelCaseValue] !== void 0) {
                found = object[camelCaseValue];
                break;
              // 如果語法有對應到模組中的物件，而且語法還未到底，那麼就依照此物件遞迴搜尋。
              } else if (ts.isPlainObject(object[value]) && depth !== maxDepth) {
                object = object[value];
              // 如果語法有對應一個函式，則使用該函式。
              } else if (object[value] !== void 0) {
                found = object[value];
                break;
              } else {
                // 如果語法沒有對應到任何東西則表示錯誤。
                module.error(Error.METHOD, query);
                break;
              }
            }
          }
          switch (false) {
            // 當找到的對應物件是個函式，就呼叫該函式並取得其結果。
            // 決定回應的結果。
            case typeof found !== 'function':
              response = found.apply(context, passedArguments);
              break;
            // 當找到的物件不是函式，就當其為結果。
            case found === void 0:
              response = found;
          }
          switch (false) {
            // 當回傳的值是一個陣列，就將回應結果推入回傳值陣列中。
            // 決定如何處置欲回傳的值。
            case !Array.isArray(returnedValue):
              returnedValue.push(response);
              break;
            // 如果回傳的值不是陣列，則建立一個陣列並包含自己和回應結果。
            case returnedValue === void 0:
              returnedValue = [returnedValue, response];
              break;
            // 當有回應時，就將回傳值設為其回應結果。
            case response === void 0:
              returnedValue = response;
          }
          // 回傳找到的物件。
          return found;
        },
        // Debug

        // 除錯訊息
        debug: function() {
          if (!settings.debug || settings.silent) {
            return;
          }
          module.debug = Function.prototype.bind.call(console.info, console, `${NAME}:`);
          return module.debug.apply(console, arguments);
        },
        // Error

        // 錯誤訊息
        error: function() {
          if (settings.silent) {
            return;
          }
          module.error = Function.prototype.bind.call(console.error, console, `${NAME}:`);
          return module.error.apply(console, arguments);
        }
      };
      // ------------------------------------------------------------------------
      // Tocas 核心安插
      // ------------------------------------------------------------------------
      if (methodInvoked) {
        if (instance === void 0) {
          module.initialize();
        }
        return module.invoke(query);
      } else {
        if (instance !== void 0) {
          instance.invoke('destroy');
        }
        return module.initialize();
      }
    });
    if (returnedValue !== void 0) {
      return returnedValue;
    } else {
      return ts;
    }
  }
};
