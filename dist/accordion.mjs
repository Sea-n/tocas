// Generated by CoffeeScript 2.3.1
export var Accordion = class Accordion {
  // --------------------------------------------------------------
  // 建構子
  // --------------------------------------------------------------
  constructor(selector, options) {
    // --------------------------------------------------------------
    // 公開方法
    // --------------------------------------------------------------
    this.open = this.open.bind(this);
    this.close = this.close.bind(this);
    this.toggle = this.toggle.bind(this);
    this.closeAll = this.closeAll.bind(this);
    this.isActive = this.isActive.bind(this);
    this.destroy = this.destroy.bind(this);
    // --------------------------------------------------------------
    // 內部方法
    // --------------------------------------------------------------
    this._open = this._open.bind(this);
    this._close = this._close.bind(this);
    this._isActive = this._isActive.bind(this);
    this._getCount = this._getCount.bind(this);
    this._getContent = this._getContent.bind(this);
    // --------------------------------------------------------------
    // 事件方法
    // --------------------------------------------------------------
    this._bindEvents = this._bindEvents.bind(this);
    this._eventClick = this._eventClick.bind(this);
    this._triggerOpen = this._triggerOpen.bind(this);
    this._triggerClose = this._triggerClose.bind(this);
    // --------------------------------------------------------------
    // 變數與常數設置
    // --------------------------------------------------------------

    // 別名。
    this._ALIAS = '.accordion';
    // 事件名稱。
    this._EVENTS = {
      OPENING: `opening${this._ALIAS}`,
      OPEN: `open${this._ALIAS}`,
      CLOSING: `closing${this._ALIAS}`,
      CLOSE: `close${this._ALIAS}`,
      CHANGE: `change${this._ALIAS}`,
      CLICK: `click${this._ALIAS}`
    };
    // 樣式名稱。
    this._CLASSNAMES = {
      active: 'active'
    };
    // 選擇器名稱。
    this._SELECTORS = {
      title: ':scope > .title',
      content: ':scope > .content',
      accordion: ':scope > .ts.accordion',
      activeContent: ':scope > .active.content',
      active: ':scope > .active'
    };
    // --------------------------------------------------------------
    // 區域變數
    // --------------------------------------------------------------
    this._tocas = new Tocas(selector);
    this._options = options;
  }

  open(index) {
    this._open(index);
    return this;
  }

  close(index) {
    this._close(index);
    return this;
  }

  toggle(index) {
    if (this.isActive(index)) {
      this.close(index);
    } else {
      this.open(index);
    }
    return this;
  }

  closeAll() {
    var i, index, ref;
    for (index = i = 0, ref = this._getCount() - 1; (0 <= ref ? i <= ref : i >= ref); index = 0 <= ref ? ++i : --i) {
      this.close(index);
    }
    return this;
  }

  isActive(index) {
    return this._isActive(index);
  }

  destroy() {
    return this._tocas.unbind(this._ALIAS);
  }

  _open(index) {
    this._tocas.find(this._SELECTORS.TITLE).eq(index).addClass(this._CLASSNAMES.ACTIVE);
    this._tocas.find(this._SELECTORS.CONTENT).eq(index).addClass(this._CLASSNAMES.ACTIVE);
    return this._triggerOpen();
  }

  _close(index) {
    this._tocas.find(this._SELECTORS.TITLE).eq(index).removeClass(this._CLASSNAMES.ACTIVE);
    this._tocas.find(this._SELECTORS.CONTENT).eq(index).removeClass(this._CLASSNAMES.ACTIVE);
    return this._triggerClose();
  }

  _isActive(index) {
    return this._tocas.find(this._SELECTORS.TITLE).hasClass(this._CLASSNAME.ACTIVE);
  }

  _getCount() {
    return this._tocas.find(this._SELECTORS.TITLE).count();
  }

  _getContent(index) {
    return this._tocas.find(this._SELECTORS.CONTENT).get(index);
  }

  _bindEvents() {
    return this._tocas.bindWithChild(this._EVENTS.CLICK, this._SELECTORS.TITLE, this._eventClick);
  }

  _eventClick(event) {
    var index;
    index = this._tocas.find(this._SELECTORS.TITLE).index(event.target);
    return this.toggle(index);
  }

  _triggerOpen(index) {
    var contentElement;
    contentElement = this._getContent(index);
    this._options.onOpening.call(contentElement, contentElement, index);
    this._options.onOpen.call(contentElement, contentElement, index);
    return this._options.onChange.call(contentElement, contentElement, index);
  }

  _triggerClose(index) {
    var contentElement;
    contentElement = this._getContent(index);
    this._options.onClosing.call(contentElement, contentElement, index);
    this._options.onClose.call(contentElement, contentElement, index);
    return this._options.onChange.call(contentElement, contentElement, index);
  }

};
