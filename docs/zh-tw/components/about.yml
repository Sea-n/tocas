#=======================================================
# Header
#=======================================================

Title: 關於
Description: 一些和 Tocas UI 相關的開發歷程，還有其中瑣碎的事物。

#=======================================================
# Settings
#=======================================================

Type: Paragraphy

#=======================================================
# Definitions
#=======================================================

Definitions:
    - Title: 愚笨的元件和聰明的組合
      Description: |
          Tocas UI 有一個簡單的概念：「愚笨的元件和聰明的組合（ _Dumb components and smart composition._ ）」我們假定所有的元件都是愚蠢而且不帶有太多的偏見。

          當兩個元件擺放在一起時，不會有任何的樣式相互影響。一個過度聰明的元件會做出這件多餘的事：在卡片元件裡的按鈕可能會為了符合卡片的外觀而自動更改其圓角、字體大小、顏色樣式…等。

          在巢狀式的元件堆疊下，這些事情將會變得更加難以維護，樣式甚至會不斷地向下延伸替各種不同情境打造。為了解決這個問題，我們決定讓所有元件「互不相識」，設計者便能在設計介面時不須擔心任何副作用影響。

    - Title: 原子化設計
      Description: |
          Tailwind 那樣的原子化設計讓我們看到了全新的概念。

          我們不再打造出子元件（如：卡片專屬的 `card-header` 和 `card-meta`），相較之下我們試圖找出多數會被重複使用的元件並將其獨立成全新的元件。

          例如卡片裡面的中繼資料（如：作者姓名、發表時間、分享數）現在便是一個獨立的元件，你亦能將這個「中繼資料」獨立出來擺放在其他地方，甚至是文章裡用來呈現附屬資料。

          這也印證了我們的設計理念：「愚笨的元件和聰明的組合」。

    - Title: 移除元件預設外距和全新的間隔容器
      Description: |
          為了減少元件之間的副作用，我們移除了元件的預設外距。以往元件會自動以空白相互隔開，在多數情況下這個過於善意的行為會讓元件之間的間隔變得難以維護。

          正如 Ant Design 那樣提出了全新的 [Space 空白元件](https://zhuanlan.zhihu.com/p/135446399)概念，Tocas UI 也為此提出了 Space/Wrap/Row 元件。

          這些容器能夠幫助你在擺放多個元件時自動將其隔開，甚至是統一間隔寬度，亦能細分到單獨調整某個間隔的大小。

    - Title: 移除附著的（Attached）樣式
      Description: |
          以往的元件可以相互吸附，例如：在卡片下方擺放一個附著的按鈕。但衍生的問題是：卡片的寬度可能不和按鈕相等，這就會使整體的組合失效，

          正如「愚笨的元件和聰明的組合」那句話所述，我們不打算為了這個設計而讓元件之間相互依賴，因此我們決定直接移除此樣式。

    - Title: 元件內距密度（Density）樣式
      Description: |
          近乎全部的元件現在都可以單獨調整其上下內距。在 Google 的 Material Design 中，這通常被稱為「密度」。

          你現在可以透過調整元件的密度來減少元件空白並讓整個畫面變得更加緊密，這能更有效地運用螢幕上的空間而不會看起來太過鬆散。

    - Title: 去群組化
      Description: |
          以前元件通常能有一個群組（例如：卡片、按鈕、圖片群組）容器來統一其樣式，透過現代的工具、框架輔助，要讓多個不同的元件享有同個樣式已經變得十分簡單（甚至只要複製貼上樣式）

          在樣式設計上，這些群組會讓元件的原始碼變得難以維護且臃腫，因此我們決定移除群組設計。

    - Title: 減少尺寸數量
      Description: |
          提供過多的尺寸樣式會令整個畫面變得不穩定，為了解決這個問題我們決定在多數元件僅留下幾個較為重要的尺寸。通常尺寸只會有三個：Small（小）、Medium（預設）、Large（大）。

          但圖片、標題…等元件需要細微調整的情況下，這個尺寸則會多到像 Semantic UI 那樣，例如：Mini（迷你）、Tiny（微小）或是 Big（超大）、Huge（巨大）和 Massive（重量級）。

    - Title: 自動調整的明暗色系主題
      Description: |
          透過 CSS 的 `prefers-color-scheme` 功能，我們現在可以依照使用者裝置的明暗設定（如：黑暗色系）來變更元件的樣式。當使用者啟用夜間黑暗模式時，除了系統會採用暗色主題外，Tocas UI 也會反轉整個色調令背景以暗色為主。

          設計者亦能在頁面直接指定 Tocas UI 的預設明暗色系而不須特別依照使用者的裝置設定。這個色系共有四個階段：Lightest（最亮的）、Light（亮色）、Dark（暗色）、Darkest（最暗的）。

    - Title: 書寫方向和全新對齊設計
      Description: |
          Tocas UI 不再以置左、置右…等的方式來變更元件的對齊位置，而是採用全新的稱呼：起始（Start Aligned）、結束（End Aligned）位置。

          鑑於有些國家的文字排版方向是從左到右，而有些是從右到左，我們不能再以置左、置右來對齊介面上的元件。這個變更會讓設計在不同國家和使用習慣之間變得更貼切。

    - Title: 減少語意化（Emphasis）
      Description: |
          以前有許多語意樣式可供使用，如：資訊（Info）、主要（Primary）、反色（Inverted）、警告（Warning）、正面（Positive）、負面（Negative）。

          即便我們移除了像 Semantic UI 那樣的紅、黃綠藍…等，無謂的顏色命名，使用者仍會為了點綴頁面上的顏色而使用不正確的語意樣式。為了減少這個問題，我們決定移除多數的語意且只在必要時保留他們。例如：你不再能使用主要、資訊、警告、正面樣式來標示按鈕。

          一個「資訊按鈕」根本毫無意義，如果這個按鈕是主要的，那麼就讓其保持原樣；如果這個按鈕不重要，則能以外框線（Outlined）的結構描繪。

          如果是儲存按鈕，那這也只是一般的行為而不需要特地將其以「正面的」語意去渲染。當我們減少了語意的污染之後，設計時便能回歸功能性上的思考，避免一個頁面中混雜太多不同的行為動作。

    - Title: 響應式與裝置稱呼
      Description: |
          現今的瀏覽裝置尺寸變得十分多樣，以往像 Semantic UI 那樣的平板、手機、桌機…等稱呼都已經不合時宜。例如 iPad Pro 的螢幕尺寸已經近似於筆記型電腦，那麼我們就不能再以「平板」來稱呼這個裝置。

          當我們試著思考最根本的問題：頁面和應用程式使用響應式設計也只是為了在不同螢幕上呈現不同的功能性，那麼不如直接將其命名為三個最重要的尺寸規模：最小化（Minimal）、預設（Standard）、最大化（Maximal）。

          在一般情況下，介面會以「預設」規模呈現。當使用者的螢幕尺寸過小，僅會顯示最小化、最基礎的功能；當使用者的螢幕尺寸過大，那些多餘的輔助功能便可以出現在螢幕上。

          將應用程式、網頁以這三個規模去設計，便能比起 Semantic UI 那樣的平板、手機、桌機…來更加簡單地清楚地描述頁面的功能。

    - Title: 勇敢地使用行內樣式
      Description: |
          Tocas UI 並不是萬靈丹，這更像是一個元件庫。設計應用程式介面時十分地方便，但作為自由發揮的設計而言，一定沒有辦法從頭到尾都只使用 Tocas UI。

          在這種情況下我們鼓勵你直接透過 HTML 的 `style` 標籤，直接對該容器、元素進行樣式的修改。就像 Tailwind UI 那樣，不需要特別花費時間整理出一個 `my-style.css` 來好好地規劃樣式，直接在 HTML 中修改樣式令其影響一目了然。

    - Title: 減少 JavaScript 模組的干涉
      Description: |
          現今的應用程式或是網頁都有許多輔助框架可以選擇，例如：Vue、React、Svelte…甚至是 Web Components。

          我們曾在 Tocas UI 花費數年的時間替不同輔助框架打造對應的元件，但最終的維護過於繁雜而作罷。每個框架對於 Web Components 的支援度和實作方式都有所不同，令資料綁定（Data Binding）上有非常大的困難。

          這些問題到目前都還沒能被解決，而我們也決定不再這個地方花費過多的時間琢磨，最終 Tocas UI 的設計不再以 JavaScript 為主。

          猶如 Tailwind UI 那樣，Tocas UI 未來僅會單純提供基本的 JavaScript 輔助函式用來協助使用者更快速地將自己正在使用的框架能夠與 Tocas UI 結合，而不是呼叫 Tocas UI 的 JavaScript 模組來達成資料綁定、元件功能，因為這些事情都應該交由框架執行。
