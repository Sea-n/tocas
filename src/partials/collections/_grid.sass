@import ../../variables/collections/grid.variables

//*******************************//
//              Main
//*******************************//

.ts.grid
    display       : flex
    flex-direction: row
    flex-wrap     : wrap
    margin        : calc(-1 * var(--columnPadding))

.ts.grid + .ts.grid
    margin-top: var(--columnPadding)

.ts.grid > .column:not(.row)
    padding-top   : var(--columnPadding)
    padding-bottom: var(--columnPadding)
.ts.grid > .column:not(.row),
.ts.grid > .row .column
    padding-left : var(--columnPadding)
    padding-right: var(--columnPadding)

//-------------------//
//       Column
//-------------------//

.ts.grid .column

//-------------------//
//  Stretched Column
//-------------------//

.ts.grid .stretched.column:not([class*="vertically stretched"])
    flex: 1

.ts.grid > .row > .column[class*="vertically stretched"],
.ts.grid > .column[class*="vertically stretched"]:not(.row),
.ts.grid > .row[class*="vertically stretched"] > .column,
.ts.grid[class*="vertically stretched"] > .column,
.ts.grid[class*="vertically stretched"] > .row > .column
    display       : inline-flex !important
    flex-direction: column
    align-self    : stretch

.ts.grid > .row > .column[class*="vertically stretched"] > *,
.ts.grid > .column[class*="vertically stretched"]:not(.row) > *,
.ts.grid > .row[class*="vertically stretched"] > .column > *,
.ts.grid[class*="vertically stretched"] > .column > *,
.ts.grid[class*="vertically stretched"] > .row > .column > *
    flex-grow: 1

//-------------------//
//        Row
//-------------------//

.ts.grid > .row
    display       : flex
    flex-direction: row
    flex-wrap     : wrap
    width         : 100%
    padding-top   : var(--columnPadding)
    padding-bottom: var(--columnPadding)

    &.doubling
        flex-wrap: wrap

//-------------------//
//     Collapsed
//-------------------//

.ts.grid > .row.collapsed > .column:not(:last-child)
    padding-right: 0

//-------------------//
//      Compact
//-------------------//

.ts.grid.compact
    margin: 0

.ts.grid.compact > .column:not(.row),
.ts.grid.compact > .row,
.ts.grid.compact > .row > .column,
.ts.grid > .row.compact > .column
    padding: 0

//-------------------//
//      Relaxed
//-------------------//

.ts.grid.relaxed
    margin-left : calc(-1 * var(--columnRelaxedPadding))
    margin-right: calc(-1 * var(--columnRelaxedPadding))

.ts.grid.relaxed > .column:not(.row),
.ts.grid.relaxed > .row > .column:not(.row),
.ts.grid > .relaxed.row > .column:not(.row)
    padding-left : var(--columnRelaxedPadding)
    padding-right: var(--columnRelaxedPadding)

.ts.grid[class*="very relaxed"]
    margin-left : calc(-1 * var(--columnVeryRelaxedPadding))
    margin-right: calc(-1 * var(--columnVeryRelaxedPadding))

.ts.grid[class*="very relaxed"] > .column:not(.row),
.ts.grid[class*="very relaxed"] > .row > .column:not(.row),
.ts.grid > .row[class*="very relaxed"] > .column:not(.row)
    padding-left : var(--columnVeryRelaxedPadding)
    padding-right: var(--columnVeryRelaxedPadding)

//-------------------//
//    Text Aligns
//-------------------//

.ts.grid[class*="left aligned"] .column,
.ts.grid .row[class*="left aligned"] .column,
.ts.grid .column[class*="left aligned"][class*="left aligned"][class*="left aligned"]
    text-align: left

    .ts.header:not(.aligned)
        justify-content: flex-start

.ts.grid[class*="right aligned"] .column,
.ts.grid .row[class*="right aligned"] .column,
.ts.grid .column[class*="right aligned"][class*="right aligned"][class*="right aligned"]
    text-align: right

    .ts.header:not(.aligned)
        justify-content: flex-end

.ts.grid[class*="center aligned"] .column,
.ts.grid .row[class*="center aligned"] .column,
.ts.grid .column[class*="center aligned"][class*="center aligned"][class*="center aligned"]
    text-align: center

    .ts.header:not(.aligned)
        justify-content: center

.ts.grid > .column.justified.justified,
.ts.grid > .row.justified > .column,
.ts.grid > .row.justified > .column.justified.justified,
.ts.grid.justified > .column,
.ts.grid.justified > .row > .column
    text-align: justify
    hyphens   : auto

//-------------------//
//  Vertical Aligns
//-------------------//

.ts.grid[class*="top aligned"]
    align-items: flex-start
.ts.grid .row[class*="top aligned"] .column
    align-self: flex-start

.ts.grid[class*="middle aligned"]
    align-items: center
.ts.grid .row[class*="middle aligned"] .column
    align-self: center

.ts.grid[class*="bottom aligned"]
    align-items: flex-end
.ts.grid .row[class*="bottom aligned"] .column
    align-self: flex-end

//-------------------//
//      Celled
//-------------------//

.ts.celled.grid
    margin: var(--columnPadding) 0
    border: $grid_celledBorder

.ts.celled.grid > .row
    width  : 100% !important
    margin : 0
    padding: 0

.ts.celled.grid > .row:first-child:not(:last-child)
    border-bottom: $grid_celledBorder
.ts.celled.grid > .row:not(:first-child):not(:last-child)
    border-bottom: $grid_celledBorder

.ts.celled.grid > .row > .column:first-child:not(:last-child)
    border-right: $grid_celledBorder
.ts.celled.grid > .row > .column:not(:first-child):not(:last-child)
    border-right: $grid_celledBorder

.ts.celled.grid.stackable > .row > .column:first-child:not(:last-child),
.ts.celled.grid > .row.stackable > .column:first-child:not(:last-child),
.ts.celled.grid.stackable > .row > .column:not(:first-child):not(:last-child),
.ts.celled.grid > .row.stackable > .column:not(:first-child):not(:last-child)
    +rwd-serious(mobile)
        border-right : 0
        border-bottom: $grid_celledBorder

.ts.celled.grid > .column:not(.row),
.ts.celled.grid > .row > .column
    padding: var(--columnPadding)
.ts.relaxed.celled.grid > .column:not(.row),
.ts.relaxed.celled.grid > .row > .column
    padding: var(--columnRelaxedPadding)
.ts.celled.grid[class*="very relaxed"] > .column:not(.row),
.ts.celled.grid[class*="very relaxed"] > .row > .column
    padding: var(--columnVeryRelaxedPadding)

.ts.grid[class*="internally celled"]
    margin: 0
    border: 0

//-------------------//
//      Divided
//-------------------//

.ts.grid.divided:not([class*="vertically divided"]) > .row > .column:not(:last-child)
    border-right: $grid_dividedBorder

.ts.grid[class*="vertically divided"] > .row:not(:last-child):before
    position: absolute
    content : ''
    bottom  : 0
    left    : 0
    width   : calc(100% - (var(--columnPadding) * 2))
    height  : 1px
    margin  : 0 var(--columnPadding)

    border-bottom: $grid_dividedBorder

.ts.grid.relaxed[class*="vertically divided"] > .row:not(:last-child):before
    margin-left : var(--columnRelaxedPadding)
    margin-right: var(--columnRelaxedPadding)
    width       : calc(100% - var(--columnRelaxedPadding) * 2)

.ts.grid[class*="very relaxed"][class*="vertically divided"] > .row:not(:last-child):before
    margin-left : var(--columnVeryRelaxedPadding)
    margin-right: var(--columnVeryRelaxedPadding)
    width       : calc(100% - var(--columnVeryRelaxedPadding) * 2)

//-------------------//
//      Centered
//-------------------//

.ts.grid.centered,
.ts.grid .row.centered
    justify-content: center

//-------------------//
//     Equal Width
//-------------------//

.ts.grid > .row[class*="equal width"] > .column,
.ts.grid[class*="equal width"] > .column:not(.row),
.ts.grid[class*="equal width"] > .row > .column
    flex-grow: 1

//-------------------//
//      Emphasis
//-------------------//

.ts.grid > .secondary.column,
.ts.grid > .secondary.row,
.ts.grid > .row > .secondary.column
    background: $grid_secondaryBackgroundColor

.ts.grid > .tertiary.column,
.ts.grid > .tertiary.row,
.ts.grid > .row > .tertiary.column
    background: $grid_tertiaryBackgroundColor

//-------------------//
//       Padded
//-------------------//

.ts.grid.padded:not([class*="vertically padded"]):not([class*="horizontally padded"]):not(.container)
    margin: 0 !important
.ts.grid[class*="vertically padded"]:not(.container)
    margin-top   : 0 !important
    margin-bottom: 0 !important
.ts.grid[class*="horizontally padded"]:not(.container)
    margin-left : 0 !important
    margin-right: 0 !important

//-------------------//
//      Floated
//-------------------//

.column[class*="right floated"]
    margin-left: auto
.column[class*="left floated"]
    margin-right: auto

//*******************************//
//          Column Wides
//*******************************//

//-------------------//
// Grid Based Columns
//-------------------//

$columns: one $oneColumn, two $twoColumn, three $threeColumn, four $fourColumn, five $fiveColumn, six $sixColumn, seven $sevenColumn, eight $eightColumn, nine $nineColumn, ten $tenColumn, eleven $elevenColumn, twelve $twelveColumn, thirteen $thirteenColumn, fourteen $fourteenColumn, fifteen $fifteenColumn, sixteen $sixteenColumn

@each $column in $columns
    $name : nth($column, 1)
    $width: nth($column, 2)

    .ts.grid[class*="#{$name} column"] > .column:not(.row),
    .ts.grid[class*="#{$name} column"] > .row > .column,
        width: $width !important

// For the priority.
@each $column in $columns
    $name : nth($column, 1)
    $width: nth($column, 2)

    .ts.grid > .row[class*="#{$name} column"] > .column
        width: $width !important

//-------------------//
//      Columns
//-------------------//

$wides: one $oneWide, two $twoWide, three $threeWide, four $fourWide, five $fiveWide, six $sixWide, seven $sevenWide, eight $eightWide, nine $nineWide, ten $tenWide, eleven $elevenWide, twelve $twelveWide, thirteen $thirteenWide, fourteen $fourteenWide, fifteen $fifteenWide, sixteen $sixteenWide

@each $wide in $wides
    $name : nth($wide, 1)
    $width: nth($wide, 2)

    .ts.column.grid > .column[class*="#{$name} wide"],
    .ts.grid > .column.row > .column[class*="#{$name} wide"],
    .ts.grid > .row > .column[class*="#{$name} wide"],
    .ts.grid > .column[class*="#{$name} wide"]
        width: $width !important

//-------------------//
//   Mobile Columns
//-------------------//

@each $wide in $wides
    $name : nth($wide, 1)
    $width: nth($wide, 2)

    .ts.column.grid > .column[class*="#{$name} wide mobile"],
    .ts.grid > .column.row > .column[class*="#{$name} wide mobile"],
    .ts.grid > .row > .column[class*="#{$name} wide mobile"],
    .ts.grid > .column[class*="#{$name} wide mobile"]
        +rwd-serious(mobile)
            width: $width !important

        &:not([class*="wide tablet"])
            +rwd-serious(tablet)
                width: $width !important
        &:not([class*="wide computer"])
            +rwd-serious(computer)
                width: $width !important
        &:not([class*="wide large screen"])
            +rwd-serious(large)
                width: $width !important

//-------------------//
//   Tablet Columns
//-------------------//

@each $wide in $wides
    $name : nth($wide, 1)
    $width: nth($wide, 2)

    .ts.column.grid > .column[class*="#{$name} wide tablet"],
    .ts.grid > .column.row > .column[class*="#{$name} wide tablet"],
    .ts.grid > .row > .column[class*="#{$name} wide tablet"],
    .ts.grid > .column[class*="#{$name} wide tablet"]
        +rwd-serious(tablet)
            width: $width !important

        &:not([class*="wide computer"])
            +rwd-serious(computer)
                width: $width !important
        &:not([class*="wide large screen"])
            +rwd-serious(large)
                width: $width !important

//-------------------//
//  Computer Columns
//-------------------//

@each $wide in $wides
    $name : nth($wide, 1)
    $width: nth($wide, 2)

    .ts.column.grid > .column[class*="#{$name} wide computer"],
    .ts.grid > .column.row > .column[class*="#{$name} wide computer"],
    .ts.grid > .row > .column[class*="#{$name} wide computer"],
    .ts.grid > .column[class*="#{$name} wide computer"]
        +rwd-serious(computer)
            width: $width !important

        &:not([class*="wide large screen"])
            +rwd-serious(large)
                width: $width !important

//-------------------//
//   Large Columns
//-------------------//

@each $wide in $wides
    $name : nth($wide, 1)
    $width: nth($wide, 2)

    .ts.column.grid > .column[class*="#{$name} wide large screen"],
    .ts.grid > .column.row > .column[class*="#{$name} large screen"],
    .ts.grid > .row > .column[class*="#{$name} large screen"],
    .ts.grid > .column[class*="#{$name} large screen"]
        +rwd-serious(large)
            width: $width !important

//-------------------//
//      Sticky
//-------------------//

.ts.grid > .sticky.column
    position: sticky
    top     : 0

//-------------------//
//     Doubling
//-------------------//

.ts.grid .row.doubling[class*="two column"] > .column:not(.row),
.ts.grid.doubling[class*="two column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $oneColumn !important
    +rwd-serious(tablet)
        width: $oneColumn !important
.ts.grid .row.doubling[class*="three column"] > .column:not(.row),
.ts.grid.doubling[class*="three column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $twoColumn !important
    +rwd-serious(tablet)
        width: $twoColumn !important
.ts.grid .row.doubling[class*="four column"] > .column:not(.row),
.ts.grid.doubling[class*="four column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $twoColumn !important
    +rwd-serious(tablet)
        width: $twoColumn !important
.ts.grid .row.doubling[class*="five column"] > .column:not(.row),
.ts.grid.doubling[class*="five column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $twoColumn !important
    +rwd-serious(tablet)
        width: $threeColumn !important
.ts.grid .row.doubling[class*="six column"] > .column:not(.row),
.ts.grid.doubling[class*="six column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $twoColumn !important
    +rwd-serious(tablet)
        width: $threeColumn !important
.ts.grid .row.doubling[class*="seven column"] > .column:not(.row),
.ts.grid.doubling[class*="seven column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $twoColumn !important
    +rwd-serious(tablet)
        width: $threeColumn !important
.ts.grid .row.doubling[class*="eight column"] > .column:not(.row),
.ts.grid.doubling[class*="eight column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $twoColumn !important
    +rwd-serious(tablet)
        width: $fourColumn !important
.ts.grid .row.doubling[class*="nine column"] > .column:not(.row),
.ts.grid.doubling[class*="nine column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $threeColumn !important
    +rwd-serious(tablet)
        width: $fourColumn !important
.ts.grid .row.doubling[class*="ten column"] > .column:not(.row),
.ts.grid.doubling[class*="ten column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $threeColumn !important
    +rwd-serious(tablet)
        width: $fiveColumn !important
.ts.grid .row.doubling[class*="eleven column"] > .column:not(.row),
.ts.grid.doubling[class*="eleven column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $threeColumn !important
    +rwd-serious(tablet)
        width: $fiveColumn !important
.ts.grid .row.doubling[class*="twelve column"] > .column:not(.row),
.ts.grid.doubling[class*="twelve column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $threeColumn !important
    +rwd-serious(tablet)
        width: $sixColumn !important
.ts.grid .row.doubling[class*="thirteen column"] > .column:not(.row),
.ts.grid.doubling[class*="thirteen column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $threeColumn !important
    +rwd-serious(tablet)
        width: $sixColumn !important
.ts.grid .row.doubling[class*="fourteen column"] > .column:not(.row),
.ts.grid.doubling[class*="fourteen column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $fourColumn !important
    +rwd-serious(tablet)
        width: $sevenColumn !important
.ts.grid .row.doubling[class*="fifteen column"] > .column:not(.row),
.ts.grid.doubling[class*="fifteen column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $fourColumn !important
    +rwd-serious(tablet)
        width: $sevenColumn !important
.ts.grid .row.doubling[class*="sixteen column"] > .column:not(.row),
.ts.grid.doubling[class*="sixteen column"] > .column:not(.row)
    +rwd-serious(mobile)
        width: $fourColumn !important
    +rwd-serious(tablet)
        width: $eightColumn !important

//-------------------//
//     Reversed
//-------------------//

.ts.grid.reversed:not([class*="mobile reversed"]):not([class*="tablet reversed"]):not([class*="computer reversed"]),
.ts.grid .row.reversed:not([class*="mobile reversed"]):not([class*="tablet reversed"]):not([class*="computer reversed"])
    flex-direction: row-reverse
.ts.grid[class*="mobile reversed"],
.ts.grid .row[class*="mobile reversed"]
    +rwd-serious(mobile)
        flex-direction: row-reverse
.ts.grid[class*="tablet reversed"],
.ts.grid .row[class*="tablet reversed"]
    +rwd-serious(tablet)
        flex-direction: row-reverse
.ts.grid[class*="computer reversed"],
.ts.grid .row[class*="computer reversed"]
    +rwd-serious(computer)
        flex-direction: row-reverse

//-------------------//
//     Stackable
//-------------------//

.ts.grid.stackable > .column:not(.row),
.ts.grid.stackable > .row > .column,
.ts.grid > .row.stackable > .column
    +rwd-serious(mobile)
        width: 100% !important

//-------------------//
//       Offset
//-------------------//

.ts.grid.stackable  .offset.column
    +rwd-serious(mobile)
        display: none !important

//-------------------//
//   Container Grid
//-------------------//

.ts.grid.container
    display: flex