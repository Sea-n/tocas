// Generated by CoffeeScript 2.0.0-beta4
// Dropdown

// 下拉式選單。
var Dropdown;

Dropdown = (function() {
  class Dropdown {
    constructor() {
      // Quadrant

      // 取得下拉式選單的元素象限並給予應該朝哪個方向展開。
      this.quadrant = this.quadrant.bind(this);
      // Expand

      // 展開目前的下拉式選單。
      this.expand = this.expand.bind(this);
      // Contract

      // 閉合目前的下拉式選單。
      this.contract = this.contract.bind(this);
      this.event = this.event.bind(this);
      // 元素初始化函式。
      this.init = this.init.bind(this);
      // 元素摧毀函式。
      this.destroy = this.destroy.bind(this);
      // 模組可用的方法。
      this.methods = this.methods.bind(this);
    }

    quadrant() {
      var height, heightHalf, position, width, widthHalf;
      position = this.$this.get().getBoundingClientRect();
      width = window.innerWidth;
      widthHalf = width / 2;
      height = window.innerHeight;
      heightHalf = height / 2;
      if (position.left < widthHalf && position.top < heightHalf) {
        return 'top left';
      } else if (position.left < widthHalf && position.top > heightHalf) {
        return 'bottom left';
      } else if (position.left > widthHalf && position.top > heightHalf) {
        return 'bottom right';
      } else if (position.left > widthHalf && position.top < heightHalf) {
        return 'top right';
      }
    }

    expand() {
      return this.$this.css('z-index', this.zIndex.ACTIVE).removeClass(this.className.HIDDEN).addClass(`${this.className.VISIBLE} ${this.className.ANIMATING}`).one('animationend', () => {
        return this.$this.removeClass(this.className.ANIMATING);
      }).emulate('animtionend', this.duration);
    }

    contract() {
      if (!this.$this.hasClass(this.className.VISIBLE)) {
        return;
      }
      return this.$this.css('z-index', this.zIndex.MENU).removeClass(this.className.VISIBLE).addClass(`${this.className.HIDDEN} ${this.className.ANIMATING}`).one('animationend', () => {
        return this.$this.removeClass(this.className.ANIMATING);
      }).emulate('animtionend', this.duration);
    }

    event(event, arg, arg2, arg3) {
      var ref;
      return (ref = this.$this.data(event)) != null ? ref.call(arg, arg2, arg3) : void 0;
    }

    init() {
      $selector(document).off('click.dropdown').on('click.dropdown', (event) => {
        var $target, noDropdownParent, notDropdown;
        
        $target = $selector(event.target);
        
        noDropdownParent = $target.closest(this.selector.NOT_BASIC_DROPDOWN).length === 0;
        
        notDropdown = !$target.hasClass(this.className.DROPDOWN);
        console.log(noDropdownParent, notDropdown);
        
        if (noDropdownParent && notDropdown) {
          return ts(this.selector.VISIBLE_DROPDOWN).dropdown('hide');
        }
      });
      this.$this.on('click', (event) => {
        var $target, dropdownParent, isDropdown, isItem, isVisible, itemParent, menuParent;
        this.$this.removeClass('upward downward leftward rightward');
        switch (this.quadrant()) {
          case 'top left':
            this.$this.addClass('downward rightward');
            break;
          case 'top right':
            this.$this.addClass('downward leftward');
            break;
          case 'bottom left':
            this.$this.addClass('upward rightward');
            break;
          case 'bottom right':
            this.$this.addClass('upward leftward');
        }
        
        $target = $selector(event.target);
        
        isDropdown = this.$this.hasClass(this.className.DROPDOWN);
        isVisible = this.$this.hasClass(this.className.VISIBLE);
        isItem = $target.hasClass(this.className.ITEM);
        dropdownParent = $target.parent().hasClass(this.className.DROPDOWN);
        menuParent = $target.parent().hasClass(this.className.MENU);
        itemParent = $target.parent().hasClass(this.className.ITEM);
        // 如果點擊的是下拉式選單本體，或是下拉式選單中的圖示與文字。
        if (isDropdown || dropdownParent) {
          // 如果下拉式選單正在顯示的話。
          if (isVisible) {
            // 就隱藏下拉式選單。
            ts(this.selector.DROPDOWN).dropdown('hide');
          } else {
            
            ts(this.selector.DROPDOWN).dropdown('hide');
            // 不然就展開下拉式選單。
            this.expand();
          }
        }
        switch (false) {
          // 如果點擊的是下拉式選單本體，或是下拉式選單中的圖示與文字。
          case !(isDropdown && dropdownParent):
            // 如果下拉式選單正在顯示的話。
            if (isVisible) {
              // 就隱藏下拉式選單。
              return ts(this.selector.DROPDOWN).dropdown('hide');
            } else {
              // 不然就展開下拉式選單。
              return this.expand();
            }
            break;
          // 如果點擊的是選單內的項目。
          case !isItem:
            return this.event('onSelect', this.$this.get(), $target.attr('data-value'), $target.get());
        }
      });
      //isDropdownText    = $target.hasClass @className.TEXT
      //isDropdownIcon    = $target.hasClass @className.ICON
      //isDropdownImage   = $target.hasClass @className.IMAGE
      //hasDropdownParent = $target.parent().hasClass @className.DROPDOWN
      //parentIsItem      = $target.parent().hasClass @className.ITEM
      //targetIsDropdown  = $target.hasClass @className.DROPDOWN
      //isItem            = $target.hasClass @className.ITEM
      //isTsMenuItem      = $target.closest  @selector.MENU
      //isVisible         = $target.hasClass @className.VISIBLE

      //switch
      //    #
      //    when isTsMenuItem and isDropdown and parentIsItem      and targetIsDropdown and !isVisible
      //    ,    isTsMenuItem and isDropdown and !parentIsItem     and targetIsDropdown and !isVisible
      //    ,    isTsMenuItem and isDropdown and hasDropdownParent and parentIsItem and !isVisible
      //    ,    isDropdown   and isTsMenuItem and !isVisible
      //    ,    isDropdown   and targetIsDropdown and !isVisible
      //    ,    isDropdown   and isDropdownIcon  and hasDropdownParent and !isVisible
      //    ,    isDropdown   and isDropdownImage and hasDropdownParent and !isVisible
      //    ,    isDropdown   and isDropdownText  and hasDropdownParent and !isVisible
      //        # 關閉其他可見的下拉式選單。
      //        ts(@selector.DROPDOWN).dropdown 'hide'

      //        #
      //        @expand()

      //    #
      //    # when isDropdown and isItem
      //    # ,    isDropdown and parentIsItem
      //    when isVisible
      //        console.log 'y'
      //        # 關閉其他可見的下拉式選單。
      //        ts(@selector.DROPDOWN).dropdown 'hide'
      return ts.fn;
    }

    destroy() {}

    methods() {
      return {
        'change valuess': () => {},
        toggle: () => {},
        show: () => {
          this.expand();
          return ts.fn;
        },
        hide: () => {
          this.contract();
          return ts.fn;
        },
        clear: () => {},
        'hide others': () => {},
        'restore defaults': () => {},
        'restore placeholder text': () => {},
        'restore default value': () => {},
        'save defaults': () => {},
        'set selected': () => {},
        'remove selected': () => {},
        'set exactly': () => {},
        'set text': () => {},
        'set value': () => {},
        'get text': () => {},
        'get value': () => {},
        'get item': () => {},
        'set active': () => {},
        'set visible': () => {},
        'remove active': () => {},
        'remove visible': () => {},
        'is selection': () => {},
        'is animated': () => {},
        'is visible': () => {},
        'is hidden': () => {},
        'get default text': () => {},
        'get placeholder text': () => {}
      };
    }

  };

  // 模組名稱。
  Dropdown.module = 'dropdown';

  // 模組屬性。
  Dropdown.prototype.props = {
    onChange: () => {},
    onAdd: () => {},
    onRemove: () => {},
    onLabelCreate: () => {},
    onLabelRemove: () => {},
    onLabelSelect: () => {},
    onInput: () => {},
    onNoResults: () => {},
    onShow: () => {},
    onHide: () => {},
    onSelect: (value, element) => {},
    values: null,
    on: 'click',
    allowReselection: false,
    allowAdditions: false,
    hideAdditions: true,
    action: 'auto',
    minCharacters: 1,
    match: 'both',
    selectOnKeydown: true,
    forceSelection: true,
    allowCategorySelection: false,
    placeholder: 'auto'
  };

  // 類別樣式名稱。
  Dropdown.prototype.className = {
    VISIBLE: 'visible',
    HIDDEN: 'hidden',
    ANIMATING: 'animating',
    DROPDOWN: 'dropdown',
    TEXT: 'text',
    ICON: 'icon',
    IMAGE: 'image',
    ITEM: 'item',
    MENU: 'menu'
  };

  // 選擇器名稱。
  Dropdown.prototype.selector = {
    DROPDOWN: '.ts.dropdown',
    VISIBLE_DROPDOWN: '.ts.visible.dropdown',
    MENU: '.ts.menu',
    NOT_BASIC_DROPDOWN: '.ts.dropdown:not(.basic)'
  };

  //.ts.dropdown:not(.basic).visible
  Dropdown.prototype.zIndex = {
    MENU: 9,
    ACTIVE: 10,
    HOVERED: 11
  };

  Dropdown.prototype.duration = 300;

  return Dropdown;

})();

ts(Dropdown);
