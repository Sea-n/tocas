// Generated by CoffeeScript 2.0.0-beta4
// Dimmer

// 淡化幕。
var Dimmer;

Dimmer = (function() {
  class Dimmer {
    constructor() {
      // 元素初始化函式。
      this.init = this.init.bind(this);
      // 元素摧毀函式。
      this.destroy = this.destroy.bind(this);
      // Get Dimmer

      // 回傳容器中的淡化幕或自己。
      this.getDimmer = this.getDimmer.bind(this);
      // Event

      // 呼叫指定事件的回呼函式。
      this.event = this.event.bind(this);
      // Show

      // 顯示淡化幕。
      this.show = this.show.bind(this);
      // Hide

      // 隱藏淡化幕。
      this.hide = this.hide.bind(this);
      // 模組可用的方法。
      this.methods = this.methods.bind(this);
    }

    init() {
      var $dimmer;
      // 取得淡化幕
      $dimmer = this.getDimmer();
      // 如果容器內沒有淡化幕，而且自己也不是淡化幕的話。
      if ($dimmer.length === 0) {
        // 在容器內產生淡化幕。
        $selector('<div>').addClass(this.selector.DIMMER).appendTo(this.$this);
      }
      // 重新取得淡化幕。
      $dimmer = this.getDimmer();
      // 添加自訂外觀樣式。
      $dimmer.addClass(this.$this.data('variation'));
      // 如果淡化幕是可關閉的話。
      if (this.$this.data('closable')) {
        // 就賦予淡化幕一個點擊事件，當淡化幕被點擊時就隱藏自己。
        $dimmer.on('click.dimmer', (e) => {
          // 如果點擊的不是淡化幕本身，而是子元素就不要關閉。
          if (e.target !== $dimmer.get()) {
            return;
          }
          this.$this = $dimmer;
          this.hide();
          return this.$this = this.$origin;
        });
      }
      return ts.fn;
    }

    destroy() {
      var $dimmer;
      // 取得淡化幕。
      $dimmer = this.getDimmer();
      // 註銷掉點擊事件。
      return $dimmer.off('click.dimmer');
    }

    getDimmer() {
      // 如果自己是淡化幕的話就回傳自己。
      if (this.$this.hasClass('dimmer')) {
        return this.$this;
      } else {
        // 不然就回傳容器內的淡化幕。
        return this.$this.find(':scope > .ts.dimmer');
      }
    }

    event(event) {
      return this.$this.data(event).call(this.$this.get());
    }

    show() {
      this.event('onChange');
      this.event('onShow');
      return this.getDimmer().addClass(this.className.ACTIVE);
    }

    hide() {
      this.event('onChange');
      this.event('onHide');
      return this.getDimmer().removeClass(this.className.ACTIVE);
    }

    methods() {
      return {
        // Show

        // 顯示淡化幕。
        show: async() => {
          await this.delay();
          this.show();
          return ts.fn;
        },
        // Hide

        // 隱藏淡化幕。
        hide: () => {
          this.hide();
          return ts.fn;
        },
        // Toggle

        // 切換淡化幕。
        toggle: () => {
          if (this.getDimmer().hasClass(this.className.ACTIVE)) {
            this.hide();
          } else {
            this.show();
          }
          return ts.fn;
        },
        // Is Active

        // 回傳一個表示淡化幕是否正在顯示中的布林值。
        'is active': () => {
          return this.getDimmer().hasClass(this.className.ACTIVE);
        }
      };
    }

  };

  // 模組名稱。
  Dimmer.module = 'dimmer';

  // 模組屬性。
  Dimmer.prototype.props = {
    // 可否在點擊的時候關閉。
    closable: false,
    // 當出現時會呼叫的回呼函式。
    onShow: function() {},
    // 當隱藏時會呼叫的回呼函式。
    onHide: function() {},
    // 當出現或隱藏時會呼叫的回呼函式。
    onChange: function() {},
    // 當淡化幕自動產生時所要追加的樣式類別，例如 `inverted`。
    variation: ''
  };

  // 類別樣式名稱。
  Dimmer.prototype.className = {
    ACTIVE: 'active'
  };

  // 選擇器名稱。
  Dimmer.prototype.selector = {
    DIMMER: 'ts dimmer'
  };

  return Dimmer;

})();

ts(Dimmer);
