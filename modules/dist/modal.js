// Generated by CoffeeScript 2.0.0-beta4
// Modal

// 彈出式視窗。
var Modal;

Modal = (function() {
  class Modal {
    constructor() {
      // 元素初始化函式。
      this.init = this.init.bind(this);
      // 元素摧毀函式。
      this.destroy = this.destroy.bind(this);
      // Get Dimmer

      // 初始化一個淡化幕如果有必要的話，最終回傳一個全域對話視窗淡化幕。
      this.getDimmer = this.getDimmer.bind(this);
      // Open

      // 開啟一個對話視窗。
      this.open = this.open.bind(this);
      // Close

      // 關閉一個對話視窗。
      this.close = this.close.bind(this);
      // 模組可用的方法。
      this.methods = this.methods.bind(this);
    }

    init() {
      var $dimmer;
      // 取得全域對話視窗淡化幕。
      $dimmer = this.getDimmer();
      // 如果這個對話視窗不在淡化幕內，我們就將這個對話視窗移入淡化幕裡。
      if (!this.$this.parent().hasClass(this.className.MODALS_DIMMER)) {
        this.$this.appendTo($dimmer);
      }
      // 依據這個對話視窗是否可供關閉，來決定是否要追加指定樣式類別。
      if (this.$this.data('closable')) {
        this.$this.addClass(this.className.CLOSABLE);
      } else {
        this.$this.removeClass(this.className.CLOSABLE);
      }
      // 如果這個對話視窗是可供關閉而且又允許透過鍵盤快捷鍵關閉，
      // 那麼就綁定「Esc」按鍵事件到頁面上並指定關閉這個對話視窗。
      if (this.$this.data('keyboardShortcuts') && this.$this.data('closable')) {
        $selector(document).on('keyup.modal', (event) => {
          var ref;
          // 如果不是 Esc 按鍵則返回。
          if (event.keyCode !== 27) {
            return;
          }
          // 如果沒有正在顯示且可供忽略的對話視窗，那麼就返回。
          if ($selector(this.selector.CLOSABLE_ACTIVE_MODAL).length === 0) {
            return;
          }
          // 如果淡化幕已經正在關閉了，就返回。避免雙重觸發關閉事件。
          if ($selector(this.selector.CLOSING_MODALS_DIMMER).length !== 0) {
            return;
          }
          // 關閉視窗。
          this.close();
          return (ref = this.$this.data('onIgnore')) != null ? ref.call(this.$this.get()) : void 0;
        });
      }
      // 綁定「允許」按鈕的事件。
      this.$this.find(this.$this.data('approve')).on('click', () => {
        var ref;
        if (((ref = this.$this.data('onApprove')) != null ? ref.call(this.$this.get()) : void 0) !== false) {
          return this.close();
        }
      });
      // 綁定「拒絕」按鈕的事件。
      this.$this.find(this.$this.data('deny')).on('click', () => {
        var ref;
        if (((ref = this.$this.data('onDeny')) != null ? ref.call(this.$this.get()) : void 0) !== false) {
          return this.close();
        }
      });
      // 綁定「關閉」按鈕的事件。
      this.$this.find(this.selector.CLOSE_BUTTON).on('click', () => {
        return this.close();
      });
      return ts.fn;
    }

    destroy() {}

    getDimmer() {
      var $dimmer;
      // 取得全域對話視窗淡化幕。
      $dimmer = $selector(this.selector.MODALS_DIMMER);
      // 如果有的話就直接回傳淡化幕元素。
      if ($dimmer.length !== 0) {
        return $dimmer;
      }
      // 沒有的話就建立一個新的對話視窗淡化幕。
      $dimmer = $selector('<div>').addClass(this.className.MODALS_DIMMER);
      // 將淡化幕推入到網頁中。
      $selector('body').append($dimmer);
      // 綁定淡化幕被按下時，自動關閉對話視窗的點擊事件。
      $dimmer.on('click', (event) => {
        var ref;
        // 如果點擊淡化幕但目標其實是子元素就離開。
        if (event.target !== $dimmer.get()) {
          return;
        }
        // 關閉可供點擊關閉的對話視窗。
        this.$this = $dimmer.find(this.selector.CLOSABLE_ACTIVE_MODAL);
        this.close();
        return (ref = this.$this.data('onIgnore')) != null ? ref.call(this.$this.get()) : void 0;
      });
      // 回傳這個新的淡化幕。
      return $dimmer;
    }

    async open() {
      // 如果要開啟的對話視窗早已開啟，就離開此程式。
      if (this.$this.hasClass(this.className.ACTIVE)) {
        return;
      }
      
      if ($selector(`.${this.className.ACTIVE}.modal`).length !== 0) {
        ts('.modal').modal('hide');
        await this.delay(250);
      }
      // 鎖定頁面的捲動。
      $selector('body').attr('data-modal-lock', 'true');
      // 將對話視窗的淡化幕設置為啟用、開啟中。
      this.$this.parent().addClass(`${this.className.ACTIVE} ${this.className.OPENING}`);
      // 將對話視窗設置為啟用、開啟中。
      // 當對話視窗的動畫執行結束後，就移除自己還有淡化幕的開啟中樣式。
      return this.$this.addClass(`${this.className.ACTIVE} ${this.className.OPENING}`).one('animationend', () => {
        this.$this.removeClass(this.className.OPENING);
        return this.$this.parent().removeClass(this.className.OPENING);
      });
    }

    close() {
      // 如果這個對話視窗本來就沒有啟用，就不需要執行接下來的關閉程式。
      if (!this.$this.hasClass(this.className.ACTIVE)) {
        return;
      }
      // 解除頁面的捲動鎖定。
      $selector('body').removeAttr('data-modal-lock');
      // 將對話視窗的淡化幕設置為關閉中。
      this.$this.parent().addClass(this.className.CLOSING);
      // 將對話視窗設置為啟用、關閉中。
      // 當對話視窗的動畫執行結束後，就移除自己還有淡化幕的關閉中樣式。
      return this.$this.addClass(`${this.className.ACTIVE} ${this.className.CLOSING}`).one('animationend', () => {
        this.$this.removeClass(`${this.className.ACTIVE} ${this.className.CLOSING}`);
        this.$this.parent().removeClass(`${this.className.ACTIVE} ${this.className.CLOSING}`);
        // 呼叫關閉時的事件函式。
        return this.$this.data('onClose').call(this.$this.get());
      });
    }

    methods() {
      return {
        // Show

        // 顯示對話視窗。
        show: () => {
          this.open();
          return ts.fn;
        },
        // Hide

        // 隱藏對話視窗。
        hide: () => {
          this.close();
          return ts.fn;
        },
        // Toggle

        // 切換對話視窗。
        toggle: () => {
          if (this.$this.hasClass('active')) {
            this.close();
          } else {
            this.open();
          }
          return ts.fn;
        },
        // Is Active

        // 回傳一個表示對話視窗是否正在顯示的布林值。
        'is active': () => {
          return this.$this.hasClass('active');
        }
      };
    }

  };

  // 模組名稱。
  Modal.module = 'modal';

  // 模組屬性。
  Modal.prototype.props = {
    // 會呼叫同意回呼函式的元素選擇器。
    approve: '.approve, .positive, .ok',
    // 會呼叫拒絕回呼函式的元素選擇器。
    deny: '.deny, .negative, .cancel',
    // 是否可由點擊背景來關閉對話視窗。
    closable: true,
    // 同意時所被呼叫的函式，如果這個函式回傳 false 的話將不會關閉對話視窗。
    onApprove: function() {
      return true;
    },
    // 拒絕時所被呼叫的函式，如果這個函式回傳 false 的話將不會關閉對話視窗。
    onDeny: function() {
      return true;
    },
    // 當視窗被關閉時所呼叫的函式。
    onClose: function() {},
    // 當視窗是以點擊背景關閉時所呼叫的函式。
    onIgnore: function() {},
    // 是否綁定鍵盤快捷鍵，如 Esc 鍵以關閉視窗。
    keyboardShortcuts: true
  };

  // 類別樣式名稱。
  Modal.prototype.className = {
    MODALS_DIMMER: 'ts modals dimmer',
    CLOSABLE: 'closable',
    ACTIVE: 'active',
    OPENING: 'opening',
    CLOSING: 'closing'
  };

  // 選擇器名稱。
  Modal.prototype.selector = {
    CLOSE_BUTTON: ':scope > .ts.close.button',
    MODALS_DIMMER: '.ts.modals.dimmer',
    CLOSING_MODALS_DIMMER: '.ts.modals.closing.dimmer',
    CLOSABLE_ACTIVE_MODAL: '.ts.modal.active.closable'
  };

  return Modal;

})();

ts(Modal);

ts.prompt = function(title, value = '', onApprove = function() {
    return true;
  }) {
  return ts.modal({
    title: title,
    prompt: {
      value: value
    },
    closable: false,
    onApprove: onApprove
  });
};

ts.modal = async function(title, content, onClose = function() {}) {
  var $modal, cancel, customOptions, delay, hasModal, input, isTextarea, modal, negative, ok, options, placeholder, positive, prompt, resizable, value;
  // 取得現有的臨時對話窗。
  $modal = $selector('[data-modal-temporary]');
  hasModal = $modal.length !== 0;
  delay = function(time = 0) {
    return new Promise(function(resolve) {
      return setTimeout(resolve, time);
    });
  };
  if (hasModal) {
    if ($modal.hasClass('active')) {
      // 隱藏原先的對話視窗。
      ts('[data-modal-temporary]').modal('hide');
      // 延遲一小段時間讓對話視窗隱藏後才繼續接下來的動作。
      // 避免視窗還沒隱藏，就改變其外觀看起來會很詭異。
      await delay(250);
      // 重設對話視窗的樣式。
      $modal.removeClass('mini tiny small large');
    }
  } else {
    // 如果沒有臨時對話視窗，就自己建立一個，然後推入 Body 中。
    $modal = $selector('<div>').attr('data-modal-temporary', 'true').appendTo($selector('body'));
  }
  // 如果 `title` 不是物件，就表示這是簡易對話視窗。
  if (typeof title !== 'object') {
    // 初始化簡易對話視窗的內容。
    modal = `<div class=\"header\">${title}</div>\n<div class=\"content\">${content}</div>\n<div class=\"actions\">\n    <button class=\"ts ok button\">\n        確定\n    </button>\n</div>`;
    
    $modal.addClass('ts mini modal').html(modal);
    
    return ts('[data-modal-temporary]').modal({
      onClose: function() {
        onClose.call(this);
        return $selector('[data-modal-temporary]').remove();
      }
    }).modal('show');
  } else {
    customOptions = title;
    options = {
      title: null,
      content: null,
      closable: true,
      prompt: null,
      // type       : 'input'
      // placeholder: null
      // value      : null
      size: 'mini',
      actions: {
        positive: null,
        negative: null,
        ok: '確定',
        cancel: null
      },
      onApprove: function() {
        return true;
      },
      onDeny: function() {
        return true;
      },
      onClose: function() {},
      onIgnore: function() {}
    };
    options = Object.assign({}, options, customOptions);
    title = options.title != null ? `<div class='header'>${options.title}</div>` : '';
    positive = options.actions.positive != null ? `<button class='ts positive button'>${options.actions.positive}</button>` : '';
    negative = options.actions.negative != null ? `<button class='ts negative button'>${options.actions.negative}</button>` : '';
    ok = options.actions.ok != null ? `<button class='ts ok button'>${options.actions.ok}</button>` : '';
    cancel = options.actions.cancel != null ? `<button class='ts cancel button'>${options.actions.cancel}</button>` : '';
    content = options.content != null ? options.content : '';
    if (options.prompt != null) {
      isTextarea = options.prompt.type === 'textarea';
      placeholder = options.prompt.placeholder != null ? options.prompt.placeholder : '';
      value = options.prompt.value != null ? options.prompt.value : '';
      if (isTextarea) {
        input = `<textarea style=\"min-width: 100%\" rows=\"3\" placeholder=\"${placeholder}\">${value}</textarea>`;
      } else {
        input = `<input type=\"text\" placeholder=\"${placeholder}\" value=\"${value}\">`;
      }
      resizable = isTextarea ? 'resizable' : '';
      prompt = `<div class=\"ts fluid ${resizable} input\">\n    ${input}\n</div>`;
    } else {
      prompt = '';
    }
    if (content !== '' && prompt !== '') {
      prompt = `<br><br>${prompt}`;
    }
    modal = `${title}\n<div class=\"content\">${content}${prompt}</div>\n<div class=\"actions\">\n    ${cancel}\n    ${ok}\n    ${negative}\n    ${positive}\n</div>`;
    $modal.addClass(`ts ${options.size} modal`).html(modal);
    if (!isTextarea && prompt !== '') {
      $selector('[data-modal-temporary] .ts.input > *').on('keydown', (event) => {
        if (event.keyCode !== 13) {
          return;
        }
        ts('[data-modal-temporary]').modal('hide');
        return options.onApprove.call(this, $selector('[data-modal-temporary] .ts.input > *').val());
      });
    }
    return ts('[data-modal-temporary]').modal({
      closable: options.closable,
      onApprove: function() {
        return options.onApprove.call(this, $selector('[data-modal-temporary] .ts.input > *').val());
      },
      onDeny: function() {
        return options.onDeny.call(this, $selector('[data-modal-temporary] .ts.input > *').val());
      },
      onClose: function() {
        return options.onClose.call(this, $selector('[data-modal-temporary] .ts.input > *').val());
      },
      onIgnore: function() {
        return options.onIgnore.call(this, $selector('[data-modal-temporary] .ts.input > *').val());
      }
    }).modal('show');
  }
};
