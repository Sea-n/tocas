// Generated by CoffeeScript 2.0.0-beta4
// Comparison

// 比較。
var Comparison;

Comparison = (function() {
  class Comparison {
    constructor() {
      this.resize = this.resize.bind(this);
      this.resizeListener = this.resizeListener.bind(this);
      // 元素初始化函式。
      this.init = this.init.bind(this);
      // 元素摧毀函式。
      this.destroy = this.destroy.bind(this);
      // 模組可用的方法。
      this.methods = this.methods.bind(this);
    }

    resize(percent) {
      var resizerWidth;
      resizerWidth = parseInt(this.$this.find('.resizer').css('width'));
      this.$this.find('.after').css('width', `${percent + resizerWidth}px`);
      return this.$this.find('.resizer').css('left', `${percent}px`);
    }

    resizeListener(event, offset) {
      var parentRect, resizerRect, x;
      parentRect = this.$this.get().getBoundingClientRect();
      resizerRect = this.$this.find('.resizer').get().getBoundingClientRect();
      x = (event.clientX - parentRect.left) - offset;
      if (x < 0) {
        x = 0;
      }
      if (x > parentRect.width - resizerRect.width) {
        x = parentRect.width - resizerRect.width;
      }
      return this.resize(x);
    }

    init() {
      var afterImg, beforeImg, template;
      beforeImg = this.$this.find('.before').attr('src');
      afterImg = this.$this.find('.after').attr('src');
      template = this.createElement(`<div class=\"ts comparison\">\n    <div class=\"before\">\n        <img src=\"${beforeImg}\" style=\"filter: blur(5px);\">\n        <label>Before</label>\n    </div>\n    <div class=\"after\">\n        <img src=\"${afterImg}\">\n        <label>After</label>\n    </div>\n    <div class=\"circular resizer\"></div>\n</div>`);
      this.$this.replaceWith(template);
      this.$this = $selector(template);
      this.$this.on('mousedown', (event) => {
        var resizerRect, startOffset;
        if (!$selector(event.target).hasClass('resizer')) {
          return;
        }
        resizerRect = this.$this.find('.resizer').get().getBoundingClientRect();
        startOffset = event.clientX - resizerRect.left;
        return this.$this.on('mousemove', (moveEvent) => {
          return this.resizeListener(moveEvent, startOffset);
        }).on('mouseup', () => {
          return this.$this.off('mousemove');
        }).on('mouseout', (event) => {
          if ($selector(event.target).closest('.comparison').length === 0) {
            return this.$this.off('mousemove');
          }
        });
      });
      return ts.fn;
    }

    destroy() {}

    methods() {
      return {
        // Show After

        // 完全展示「之後」的圖片。
        'show after': () => {},
        // Show Before

        // 完全展示「之前」的圖片。
        'show before': () => {},
        // Set Resizer

        // 設置延展分隔線的位置為指定百分比位置，以「之後」為 `0`。
        'set resizer': () => {},
        // Set After URL

        // 設置「之後」圖片的網址。
        'set after url': (url) => {},
        // Set Before URL

        // 設置「之前」圖片的網址。
        'set before url': (url) => {}
      };
    }

  };

  // 模組名稱。
  Comparison.module = 'comparison';

  // 模組屬性。
  Comparison.prototype.props = {
    
    onResize: function() {},
    
    onDisplay: function() {},
    
    resizable: true,
    
    labels: {
      before: 'Before',
      after: 'After'
    },
    
    resizer: {
      //divider, circular, dots, rounded
      style: 'divider'
    }
  };

  
  // 類別樣式名稱。
  Comparison.prototype.className = {
    HIDDEN: 'hidden'
  };

  // 選擇器名稱。
  Comparison.prototype.selector = {
    CLOSE_BUTTON: '.ts.close.button'
  };

  return Comparison;

})();

ts(Comparison);
