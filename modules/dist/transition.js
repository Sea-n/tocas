// Generated by CoffeeScript 2.0.0-beta4
// Transition

// 過場效果。
var Transition;

Transition = (function() {
  class Transition {
    constructor() {
      // 元素初始化函式。
      this.init = this.init.bind(this);
      // 元素摧毀函式。
      this.destroy = this.destroy.bind(this);
      // Animate

      // 播放動畫。
      this.animate = this.animate.bind(this);
      
      // 將新的動畫推入佇列中，如果佇列裡只有這個動畫就立即執行。
      this.push = this.push.bind(this);
      
      this.execute = this.execute.bind(this);
      // 模組可用的方法。
      this.methods = this.methods.bind(this);
    }

    init() {
      // 初始化動畫佇列。
      this.$this.data('animationQueue', []);
      // 初始化動畫索引。
      this.$this.data('animationIndex', 0);
      return ts.fn;
    }

    destroy() {}

    untilVisible() {
      return new Promise(function(resolve) {
        return setInterval(function() {
          if (!document.hidden) {
            return resolve();
          }
        }, 1);
      });
    }

    async animate({animation, duration, onComplete, group, interval}) {
      var index, looping, queue;
      switch (animation) {
        case 'show':
          this.$this.removeAttr(this.hiddenName);
          // 過了動畫的執行時間（相當於動畫執行完畢），我們才繼續。
          await this.delay(duration);
          break;
        case 'hide':
          this.$this.attr(this.hiddenName, 'true');
          // 過了動畫的執行時間（相當於動畫執行完畢），我們才繼續。
          await this.delay(duration);
          break;
        case 'toggle':
          if (this.$this.attr(this.hiddenName) === 'true') {
            this.$this.removeAttr(this.hiddenName);
          } else {
            this.$this.attr(this.hiddenName, 'true');
          }
          // 過了動畫的執行時間（相當於動畫執行完畢），我們才繼續。
          await this.delay(duration);
          break;
        case 'delay':
          // 過了動畫的執行時間（相當於動畫執行完畢），我們才繼續。
          await this.delay(duration);
          break;
        default:
          // 設置動畫時間。
          this.$this.css('animation-duration', `${duration}ms`);
          // 設置動畫名稱。
          this.$this.attr(this.animationName, animation);
          await this.delay();
          // 執行動畫。
          this.$this.attr(this.animatingName, true);
          // 過了動畫的執行時間（相當於動畫執行完畢），我們才繼續。
          await this.delay(duration);
          
          if (animation.indexOf('in') !== -1) {
            if (this.$this.attr(this.hiddenName) === 'true') {
              this.$this.removeAttr(this.hiddenName);
            }
          }
          if (animation.indexOf('out') !== -1) {
            this.$this.attr(this.hiddenName, 'true');
          }
          // 移除動畫效果樣式。
          this.$this.removeAttr(this.animatingName);
      }
      // 呼叫完成函式。
      onComplete.call(this.$this.get());
      // 取得動畫佇列。
      queue = this.$this.data('animationQueue');
      // 取得目前播放的索引。
      index = this.$this.data('animationIndex');
      // 確認是否為無限重複的動畫。
      looping = this.$this.data('animationLooping');
      index++;
      // 如果沒有下一個動畫了，就表示這是最後一個。
      // 我們就把動畫佇列清空。
      if (queue[index] === void 0) {
        index = 0;
        this.$this.removeAttr(this.animationName).removeAttr(this.animatingName).css('animation-duration', '').data('animationIndex', index);
        // 如果不需要重複的話，就將佇列清空。
        if (!looping) {
          queue = [];
          this.$this.data('animationQueue', queue);
          return;
        }
      }
      // 設置新的索引。
      this.$this.data('animationIndex', index);
      // 執行下一個動畫。
      return this.animate(queue[index]);
    }

    push(animation, duration, onComplete) {
      var data, queue;
      // 如果元素還沒初始化的話，就先初始化。
      if (this.$this.data('animationQueue') === void 0) {
        this.init();
      }
      // 準備好本次的動畫資料。
      if (typeof duration === 'function') {
        onComplete = duration;
        duration = 800;
      }
      if (duration === null) {
        duration = 800;
      }
      if (onComplete === null || onComplete === void 0) {
        onComplete = function() {};
      }
      data = {animation, duration, onComplete};
      // 將本次動畫資料擺入至佇列中。
      queue = this.$this.data('animationQueue');
      queue.push(data);
      // 如果佇列裡只有一個動畫，那麼就是剛才所新增的，直接開始執行。
      if (queue.length === 1) {
        return this.animate(data);
      }
    }

    execute(options) {
      var $self, element, elements, i, index, len, results;
      if (this.index !== 0 && (options.reverse != null) && options.reverse === true) {
        return ts.fn;
      }
      switch (options.animation) {
        case 'hide':
        case 'toggle':
        case 'show':
          if (options.interval === void 0) {
            options.interval = 0;
          }
          if (options.duration === null) {
            options.duration = 0;
          }
      }
      options = Object.assign({
        animation: '',
        duration: null,
        interval: 100,
        reverse: false,
        group: false,
        onComplete: function() {},
        onAllComplete: function() {}
      }, options);
      if (options.reverse === true) {
        elements = $elements.toArray().reverse();
        results = [];
        for (index = i = 0, len = elements.length; i < len; index = ++i) {
          element = elements[index];
          $self = $selector(element);
          results.push((async($self) => {
            await this.delay(options.interval * index);
            await this.untilVisible();
            this.$this = $self;
            return this.push(options.animation, options.duration, options.onComplete);
          })($self));
        }
        return results;
      } else {
        return (async() => {          //@$this = @$origin
          await this.delay(options.interval * this.index);
          await this.untilVisible();
          return this.push(options.animation, options.duration, options.onComplete);
        })();
      }
    }

    methods() {
      return {
        'bounce': (duration, onComplete) => {
          this.execute({
            animation: 'bounce',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'flash': (duration, onComplete) => {
          this.execute({
            animation: 'flash',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'pulse': (duration, onComplete) => {
          this.execute({
            animation: 'pulse',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rubber band': (duration, onComplete) => {
          this.execute({
            animation: 'rubber band',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'shake': (duration, onComplete) => {
          this.execute({
            animation: 'shake',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'head shake': (duration, onComplete) => {
          this.execute({
            animation: 'head shake',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'swing': (duration, onComplete) => {
          this.execute({
            animation: 'swing',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'tada': (duration, onComplete) => {
          this.execute({
            animation: 'tada',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'wobble': (duration, onComplete) => {
          this.execute({
            animation: 'wobble',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'jello': (duration, onComplete) => {
          this.execute({
            animation: 'jello',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce in': (duration, onComplete) => {
          this.execute({
            animation: 'bounce in',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce in down': (duration, onComplete) => {
          this.execute({
            animation: 'bounce in down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce in left': (duration, onComplete) => {
          this.execute({
            animation: 'bounce in left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce in right': (duration, onComplete) => {
          this.execute({
            animation: 'bounce in right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce in up': (duration, onComplete) => {
          this.execute({
            animation: 'bounce in up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce out': (duration, onComplete) => {
          this.execute({
            animation: 'bounce out',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce down': (duration, onComplete) => {
          this.execute({
            animation: 'bounce down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce out left': (duration, onComplete) => {
          this.execute({
            animation: 'bounce out left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce out right': (duration, onComplete) => {
          this.execute({
            animation: 'bounce out right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'bounce out up': (duration, onComplete) => {
          this.execute({
            animation: 'bounce out up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in': (duration, onComplete) => {
          this.execute({
            animation: 'fade in',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in down': (duration, onComplete) => {
          this.execute({
            animation: 'fade in down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in down heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade in down heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in left': (duration, onComplete) => {
          this.execute({
            animation: 'fade in left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in left heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade in left heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in right': (duration, onComplete) => {
          this.execute({
            animation: 'fade in right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in right heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade in right heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in up': (duration, onComplete) => {
          this.execute({
            animation: 'fade in up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade in up heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade in up heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out down': (duration, onComplete) => {
          this.execute({
            animation: 'fade out down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out down heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade out down heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out left': (duration, onComplete) => {
          this.execute({
            animation: 'fade out left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out left heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade out left heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out right': (duration, onComplete) => {
          this.execute({
            animation: 'fade out right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out right heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade out right heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out up': (duration, onComplete) => {
          this.execute({
            animation: 'fade out up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'fade out up heavily': (duration, onComplete) => {
          this.execute({
            animation: 'fade out up heavily',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'flip': (duration, onComplete) => {
          this.execute({
            animation: 'flip',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'flip in x': (duration, onComplete) => {
          this.execute({
            animation: 'flip in x',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'flip in y': (duration, onComplete) => {
          this.execute({
            animation: 'flip in y',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'flip out x': (duration, onComplete) => {
          this.execute({
            animation: 'flip out x',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'flip out y': (duration, onComplete) => {
          this.execute({
            animation: 'flip out y',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'light speed in': (duration, onComplete) => {
          this.execute({
            animation: 'light speed in',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'light speed out': (duration, onComplete) => {
          this.execute({
            animation: 'light speed out',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate in': (duration, onComplete) => {
          this.execute({
            animation: 'rotate in',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate in down left': (duration, onComplete) => {
          this.execute({
            animation: 'rotate in down left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate in down right': (duration, onComplete) => {
          this.execute({
            animation: 'rotate in down right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate in up left': (duration, onComplete) => {
          this.execute({
            animation: 'rotate in up left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate in up right': (duration, onComplete) => {
          this.execute({
            animation: 'rotate in up right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate out': (duration, onComplete) => {
          this.execute({
            animation: 'rotate out',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate out down left': (duration, onComplete) => {
          this.execute({
            animation: 'rotate out down left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate out down right': (duration, onComplete) => {
          this.execute({
            animation: 'rotate out down right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate out up left': (duration, onComplete) => {
          this.execute({
            animation: 'rotate out up left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'rotate out up right': (duration, onComplete) => {
          this.execute({
            animation: 'rotate out up right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'hinge': (duration, onComplete) => {
          this.execute({
            animation: 'hinge',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'roll in': (duration, onComplete) => {
          this.execute({
            animation: 'roll in',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'roll out': (duration, onComplete) => {
          this.execute({
            animation: 'roll out',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom in': (duration, onComplete) => {
          this.execute({
            animation: 'zoom in',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom in down': (duration, onComplete) => {
          this.execute({
            animation: 'zoom in down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom in left': (duration, onComplete) => {
          this.execute({
            animation: 'zoom in left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom in up': (duration, onComplete) => {
          this.execute({
            animation: 'zoom in up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom in right': (duration, onComplete) => {
          this.execute({
            animation: 'zoom in right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom out': (duration, onComplete) => {
          this.execute({
            animation: 'zoom out',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom out down': (duration, onComplete) => {
          this.execute({
            animation: 'zoom out down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom out left': (duration, onComplete) => {
          this.execute({
            animation: 'zoom out left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom out right': (duration, onComplete) => {
          this.execute({
            animation: 'zoom out right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'zoom out up': (duration, onComplete) => {
          this.execute({
            animation: 'zoom out up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide in down': (duration, onComplete) => {
          this.execute({
            animation: 'slide in down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide in left': (duration, onComplete) => {
          this.execute({
            animation: 'slide in left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide in right': (duration, onComplete) => {
          this.execute({
            animation: 'slide in right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide in up': (duration, onComplete) => {
          this.execute({
            animation: 'slide in up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide out down': (duration, onComplete) => {
          this.execute({
            animation: 'slide out down',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide out left': (duration, onComplete) => {
          this.execute({
            animation: 'slide out left',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide out right': (duration, onComplete) => {
          this.execute({
            animation: 'slide out right',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'slide out up': (duration, onComplete) => {
          this.execute({
            animation: 'slide out up',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'toggle': (duration, onComplete) => {
          this.execute({
            animation: 'toggle',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'show': (duration, onComplete) => {
          this.execute({
            animation: 'show',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'hide': (duration, onComplete) => {
          this.execute({
            animation: 'hide',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'delay': (duration, onComplete) => {
          this.execute({
            animation: 'delay',
            duration,
            onComplete
          });
          return ts.fn;
        },
        'set looping': (options) => {
          this.$this.data('animationLooping', true);
          return ts.fn;
        },
        'remove looping': (options) => {
          this.$this.removeData('animationLooping');
          return ts.fn;
        },
        'stop': function() {},
        'stop all': function() {}
      };
    }

  };

  // 模組名稱。
  Transition.module = 'transition';

  // 模組屬性。
  //props:

  // 類別樣式名稱。
  //className:

  // 選擇器名稱。
  //selector:

  // dd
  Transition.prototype.hiddenName = 'data-animating-hidden';

  // dd
  Transition.prototype.animationName = 'data-animation';

  // dd
  Transition.prototype.animatingName = 'data-animating';

  return Transition;

})();

ts(Transition);
