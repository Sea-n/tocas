// Generated by CoffeeScript 2.0.0-beta4
// Embed

// 嵌入物件。
var Embed;

Embed = (function() {
  class Embed {
    constructor() {
      // 元素初始化函式。
      this.init = this.init.bind(this);
      // 元素摧毀函式。
      this.destroy = this.destroy.bind(this);
      // Show

      // 顯示並產生嵌入物件的內容元素。
      this.show = this.show.bind(this);
      // Reset

      // 重設嵌入物件的狀態與內容。
      this.reset = this.reset.bind(this);
      // Is File

      // 回傳一個表示網址是否為直接連接到影片檔案的網址布林值，例如帶有 `.mp4`、`.mov` 副檔名。
      this.isFile = this.isFile.bind(this);
      // Parse Options

      // 解析鍵值組，將 `k=v, k=v` 轉換成物件。
      this.parseOptions = this.parseOptions.bind(this);
      // Parse URL

      // 解析網址，將網址套用上真正的影片編號和參數。
      this.parseURL = this.parseURL.bind(this);
      // Event

      // 呼叫指定函式。
      this.event = this.event.bind(this);
      // 模組可用的方法。
      this.methods = this.methods.bind(this);
    }

    init() {
      var $icon, $placeholder, icon, id, options, parameters, placeholder, ref, ref1, source, thumbnailURL, type, url;
      source = this.$this.data('source');
      url = this.$this.data('url');
      id = this.$this.data('id');
      placeholder = this.$this.data('placeholder');
      options = this.$this.data('options');
      parameters = this.$this.data('parameters');
      icon = this.$this.data('icon');
      // 如果有指定預置圖片，而且內容不是 `auto` 的話，就從指定的預置圖片中載入圖片。
      if (placeholder && placeholder !== 'auto') {
        $placeholder = $selector('<img>').prop('onload', () => {
          return this.event('onPlaceholderDisplay');
        }).prop('src', placeholder).addClass(this.className.PLACEHOLDER);
        // 將預置圖片元素推入到嵌入物件容器裡。
        $placeholder.appendTo(this.$this);
      // 如果預置圖片內容是 `auto` 的話就試著自動抓取。
      } else if (placeholder === 'auto' && !url) {
        // 試著從來源庫中執行相對應的來源函式，並取得相對應的縮圖。
        thumbnailURL = (ref = this.sources[source]) != null ? ref.thumbnail(id) : void 0;
        // 如果沒有縮圖的話則離開。
        if (!thumbnailURL) {
          return;
        }
        // 更新嵌入元件裡的預置圖片設定。
        this.$this.data('placeholder', thumbnailURL);
        // 建立預置圖片元素，並設定圖片網址。
        $placeholder = $selector('<img>').prop('onload', () => {
          return this.event('onPlaceholderDisplay');
        }).prop('src', thumbnailURL).addClass(this.className.PLACEHOLDER);
        // 將預置圖片元素推入到嵌入物件容器裡。
        $placeholder.appendTo(this.$this);
      }
      // 如果沒有圖示或者沒有網址、或者沒有編號和來源的話就離開。
      if (!icon) {
        return;
      }
      // 建立圖示按鈕元素。
      $icon = $selector('<i>').addClass(this.className.ICON(icon));
      // 取得這個嵌入物件的種類。
      type = this.isFile(url) ? 'file' : 'url';
      // 將嵌入物件的種類保存至嵌入物件元素的設定裡。
      this.$this.data('type', type);
      // 如果影片種類不是影片檔案（有副檔名），而是像 YouTube 的網址的話⋯。
      if (type === 'url') {
        // 若有指定來源，就套用編號和網址參數來解析該來源網址。
        if (source && !url) {
          url = this.parseURL((ref1 = this.sources[source]) != null ? ref1.url : void 0, id, parameters);
        } else {
          // 不然如果是使用者自訂的網址，則用該網址。
          url = `${url}?${parameters}`;
        }
        // 將解析過的網址保存到嵌入物件設定中。
        this.$this.data('url', url);
      }
      // 圖示按下時的載入影片事件。
      $icon.on('click', () => {
        return this.show();
      });
      // 將按鈕圖示推入到嵌入物件容器內。
      $icon.appendTo(this.$this);
      return ts.fn;
    }

    destroy() {
      return this.$this.removeClass(this.className.ACTIVE).find(this.selector.ALL).remove();
    }

    show() {
      var $iframe, $video, options, type, url;
      type = this.$this.data('type');
      options = this.$this.data('options');
      url = this.$this.data('url');
      // 如果這個嵌入物件的影片網址是一個遠端影片檔案而且尚未有相關元素的話⋯。
      if (type === 'file' && this.$this.find(this.selector.VIDEO).length === 0) {
        // 就建立一個 `<video>` 元素讀取它。
        $video = $selector('<video>').prop({
          oncanplay: () => {
            return this.event('onDisplay');
          },
          src: url
        });
        // 如果嵌入物件有自訂選項的話⋯。
        if (options !== '') {
          // 將選項的 `k=v,k=v` 取出，並套用到 `<video>` 的屬性中。
          this.parseOptions(options, (key, value) => {
            return $video.attr(key, value);
          });
        }
        // 將這個 `<video>` 擺放到嵌入物件容器內。
        this.$this.append($video.get());
        this.event('onCreate');
      // 不然就是標準的網址，如果沒有相關元素的話，
      } else if (this.$this.find(this.selector.IFRAME).length === 0) {
        // 我們就建立一個 `<iframe>` 元素來讀取遠端內容。
        $iframe = $selector('<iframe>').prop({
          width: '100%',
          height: '100%',
          frameborder: '0',
          scrolling: 'no',
          onload: () => {
            return this.event('onDisplay');
          },
          src: url
        }).attr({
          webkitAllowFullScreen: '',
          mozallowfullscreen: '',
          allowFullScreen: ''
        });
        // 將這個 `<iframe>` 推入至容器中。
        this.$this.append($iframe.get());
        this.event('onCreate');
      }
      // 啟用這個嵌入物件。
      return this.$this.addClass(this.className.ACTIVE);
    }

    reset() {
      return this.$this.removeClass(this.className.ACTIVE).find(this.selector.IFRAME_VIDEO).remove();
    }

    isFile(url) {
      var extension;
      extension = url ? url.split('.').pop() : '';
      extension = extension.toUpperCase();
      return extension.indexOf('MOV') !== -1 || extension.indexOf('MP4') !== -1 || extension.indexOf('WEBM') !== -1 || extension.indexOf('OGG') !== -1;
    }

    parseOptions(options, each) {
      var object;
      if (typeof options === 'object') {
        // 如果傳入的鍵值組已經是物件的話，就不更動，直接回傳。
        return options;
      }
      // 不然就初始化一個鍵值物件，稍後用來保存解析的鍵值。
      object = {};
      options.split(',').forEach((pair) => {
        var key, value;
        pair = pair.split('=');
        key = pair[0].trim();
        value = pair[1] || '';
        object[key] = value.trim();
        if (each != null) {
          // 呼叫迴圈回呼函式，如果有的話。
          return each(key, value);
        }
      });
      return object;
    }

    parseURL(sourceURL, id, parameters) {
      return sourceURL.replace('{id}', id).replace('{parameters}', `?${parameters}`);
    }

    event(event) {
      var ref;
      return (ref = this.$this.data(event)) != null ? ref.call(this.$this.get()) : void 0;
    }

    methods() {
      return {
        // Change

        // 更換嵌入物件的設定與來源。
        change: (source, id, url) => {
          this.destroy();
          this.$this.data({
            'source': source,
            'id': id,
            'url': url
          });
          this.init();
          this.show();
          return ts.fn;
        },
        // Reset

        // 重設嵌入物件的所有狀態，復原起初的預置圖片。
        reset: () => {
          this.destroy();
          this.init();
          return ts.fn;
        },
        // Show

        // 顯示並載入嵌入物件的內容。
        show: () => {
          this.show();
          return ts.fn;
        },
        // Hide

        // 隱藏嵌入物件的內容，用預置圖片覆蓋。但不重置狀態與內容。
        hide: () => {
          this.$this.removeClass(this.className.ACTIVE);
          return ts.fn;
        },
        // Get ID

        // 取得目前嵌入物件的編號。
        'get id': () => {
          return this.$this.data('id');
        },
        // Get Placeholder

        // 取得目前嵌入物件的預置圖片路徑。
        'get placeholder': () => {
          return this.$this.data('placeholder');
        },
        // Get Source

        // 取得目前嵌入物件的來源名稱。
        'get source': () => {
          return this.$this.data('source');
        },
        // Get URL

        // 取得目前嵌入物件的影片網址。
        'get url': () => {
          return this.$this.data('url');
        },
        // Has Placeholder

        // 回傳一個表示這個嵌入物件是否設有預置圖片的布林值。
        'has placeholder': () => {
          return this.$this.data('placeholder') !== null;
        }
      };
    }

  };

  // 模組名稱。
  Embed.module = 'embed';

  // 模組屬性。
  Embed.prototype.props = {
    // 影片的編號，適用於有指定來源網站（如：`youtube`、`vimeo`）。
    id: null,
    // 影片尚未播放前的圖示名稱。
    icon: 'video play',
    // 影片的來源網站。
    source: 'youtube',
    // 影片的網址，可以是影片檔或 YouTube 那種。
    url: null,
    // 手動指定網址參數，當請求遠端影片時，這段參數會被追加在請求網址之後（如：`autoplay=true`）。
    parameters: '',
    // 這會變動嵌入物件的標籤（Attributes）。選項可以是鍵值，並以逗點分隔（如：`controls, data-user-id=12345`）。
    options: '',
    // 預置封面的圖片路徑，這個圖片會在嵌入物件尚未載入時出現。
    placeholder: 'auto',
    // 影片內嵌內容開始顯示時所呼叫的回呼函式。
    onDisplay: function() {},
    // 影片預置圖片成功讀取並顯示時所呼叫的回呼函式。
    onPlaceholderDisplay: function() {},
    // 影片的內嵌內容被產生的時候所呼叫的回呼函式。
    onCreate: function() {}
  };

  // 內建的影片來源。
  Embed.prototype.sources = {
    youtube: {
      url: 'https://www.youtube.com/embed/{id}{parameters}',
      icon: 'youtube',
      thumbnail: function(id) {
        return `https://i.ytimg.com/vi/${id}/hqdefault.jpg`;
      }
    },
    vimeo: {
      url: 'https://player.vimeo.com/video/{id}{parameters}',
      icon: 'vimeo',
      thumbnail: function(id) {
        return `https://i.vimeocdn.com/video/${id}_720.jpg`;
      }
    },
    dailymotion: {
      url: 'https://www.dailymotion.com/embed/video/{id}{parameters}',
      icon: 'video play',
      thumbnail: function(id) {
        return `https://www.dailymotion.com/thumbnail/video/${id}`;
      }
    }
  };

  // 類別樣式名稱。
  Embed.prototype.className = {
    ACTIVE: 'active',
    PLACEHOLDER: 'placeholder',
    ICON: function(icon) {
      return `${icon} icon`;
    }
  };

  // 選擇器名稱。
  Embed.prototype.selector = {
    ALL: 'iframe, video, img, i',
    IFRAME_VIDEO: 'iframe, video',
    VIDEO: 'video',
    IFRAME: 'iframe'
  };

  return Embed;

})();

ts(Embed);
